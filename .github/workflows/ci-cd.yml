name: Java CI/CD Pipeline

on:
  push:
    branches: [ main]
  pull_request:
    branches: [ main]
env:
  JAVA_VERSION: '21'
  GRADLE_VERSION: '8.7'
  POSTGRES_IMAGE: 'postgres:15'
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: Build and Test
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5434:5432
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🏗️ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: 🔧 Create Gradle Wrapper
      run: |
        echo "🔧 Creating Gradle Wrapper..."
        
        # Проверяем структуру проекта
        echo "📁 Project structure:"
        ls -la code/
        
        # Переходим в корневую папку проекта
        cd code
        
        # Создаем Gradle Wrapper если его нет
        if [ ! -f "gradlew" ]; then
          echo "📦 Creating Gradle Wrapper..."
          gradle wrapper --gradle-version=${{ env.GRADLE_VERSION }}
          
          # Делаем gradlew исполняемым
          chmod +x gradlew
          echo "✅ Gradle Wrapper created"
        else
          echo "✅ Gradle Wrapper already exists"
          chmod +x gradlew
        fi
        
        # Проверяем что wrapper создался
        echo "📋 Checking Gradle Wrapper files:"
        ls -la gradlew* || echo "No gradlew files"
        ls -la gradle/wrapper/ || echo "No gradle/wrapper directory"
        
    - name: 📦 Setup Gradle caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Check project structure
      run: |
        echo "📁 Project structure:"
        ls -lah
        echo ""
        echo "🔍 Searching for Gradle files:"
        find . -name "build.gradle" -o -name "build.gradle.kts" -o -name "gradlew" | head -20
        echo ""
        echo "📊 Gradle version:"
        if [ -f "code/gradlew" ]; then
          cd code && ./gradlew --version || true
        else
          echo "❌ gradlew not found in code directory"
        fi
        
    - name: 🏗️ Build and Publish Shared Modules
      run: |
        echo "🚀 Building and publishing shared modules to Maven Local..."
        if [ -f "code/gradlew" ]; then
          cd code && ./gradlew publishAllShared --stacktrace --info --build-cache
          
          echo "📦 Verifying published modules:"
          ls -la ~/.m2/repository/com/connection/ || echo "No Maven local repository found"
        else
          echo "❌ Cannot build - gradlew not found"
          exit 1
        fi
        
    - name: ⏳ Wait for services to be ready
      run: |
        echo "Waiting for services to be fully ready..."
        sleep 10
        
        echo "Checking PostgreSQL..."
        # Устанавливаем postgresql-client для pg_isready
        sudo apt-get update && sudo apt-get install -y postgresql-client
        
        # Проверяем PostgreSQL с правильными параметрами
        pg_isready -h localhost -p 5434 -U test_user -d test_db || echo "PostgreSQL not ready yet"
        
        echo "All services should be ready now"
        
    - name: 🧪 Run All Tests
      run: |
        echo "🧪 Running all tests with testAll task..."
        if [ -f "code/gradlew" ]; then
          cd code && ./gradlew allTest --continue --build-cache
        else
          echo "❌ Cannot run tests - gradlew not found"
          exit 1
        fi
        
      continue-on-error: true
        
    - name: 📊 Generate Test Reports
      if: always()
      run: |
        echo "📊 Generating test reports..."
        if [ -f "code/gradlew" ]; then
          cd code && ./gradlew generateCombinedAllureReport --no-daemon --build-cache
        else
          echo "❌ Cannot generate reports - gradlew not found"
        fi
        
    - name: 💾 Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          **/build/test-results/
          **/build/reports/
        retention-days: 30
        
    - name: 📈 Upload Allure Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: |
          **/build/reports/allure-report/
          **/build/allure-results/
        retention-days: 30
        
    - name: 📋 Upload Build Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: service-jars
        path: |
          **/service/*/build/libs/*.jar
          **/shared/*/build/libs/*.jar
        retention-days: 7

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
