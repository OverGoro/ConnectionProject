package com.connection.device;

import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.connection.auth.events.responses.HealthCheckResponse;
import com.connection.device.converter.DeviceConverter;
import com.connection.device.exception.DeviceAlreadyExistsException;
import com.connection.device.kafka.TypedAuthKafkaClient;
import com.connection.device.model.DeviceBLM;
import com.connection.device.model.DeviceDALM;
import com.connection.device.repository.DeviceRepository;
import com.connection.device.validator.DeviceValidator;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@Service
@EnableAutoConfiguration(exclude = {
        JpaRepositoriesAutoConfiguration.class
})
@Transactional("atomicosTransactionManager")
public class DeviceServiceImpl implements DeviceService {

    private final DeviceRepository deviceRepository;
    private final DeviceConverter deviceConverter;
    private final DeviceValidator deviceValidator;
    private final TypedAuthKafkaClient authKafkaClient;

    @Override
    public DeviceBLM createDevice(UUID clientUid, DeviceBLM deviceBLM) {
        deviceValidator.validate(deviceBLM);

        if (!clientUid.equals(deviceBLM.getClientUuid())) {
            throw new SecurityException("Client UID from token doesn't match device client UID");
        }

        if (deviceRepository.existsByClientAndName(clientUid, deviceBLM.getDeviceName())) {
            throw new DeviceAlreadyExistsException(
                    "Device with name '" + deviceBLM.getDeviceName() + "' already exists for this client");
        }

        DeviceDALM deviceDALM = deviceConverter.toDALM(deviceBLM);
        deviceRepository.add(deviceDALM);

        log.info("Device created: {} for client: {}", deviceBLM.getUid(), clientUid);
        return deviceBLM;
    }

    @Override
    public DeviceBLM getDevice(UUID clientUid, UUID deviceUid) {
        DeviceDALM deviceDALM = deviceRepository.findByUid(deviceUid);

        if (!clientUid.equals(deviceDALM.getClientUuid())) {
            throw new SecurityException("Device doesn't belong to the authenticated client");
        }

        return deviceConverter.toBLM(deviceDALM);
    }

    @Override
    public List<DeviceBLM> getDevicesByClient(UUID clientUid) {

        List<DeviceDALM> devicesDALM = deviceRepository.findByClientUuid(clientUid);
        return devicesDALM.stream()
                .map(deviceConverter::toBLM)
                .collect(Collectors.toList());
    }

    @Override
    public DeviceBLM updateDevice(UUID clientUid, DeviceBLM deviceBLM) {
        deviceValidator.validate(deviceBLM);

        DeviceDALM existingDevice = deviceRepository.findByUid(deviceBLM.getUid());
        if (!clientUid.equals(existingDevice.getClientUuid())) {
            throw new SecurityException("Device doesn't belong to the authenticated client");
        }

        if (!clientUid.equals(deviceBLM.getClientUuid())) {
            throw new SecurityException("Client UID from token doesn't match device client UID");
        }

        DeviceDALM deviceDALM = deviceConverter.toDALM(deviceBLM);
        deviceRepository.update(deviceDALM);

        log.info("Device updated: {} for client: {}", deviceBLM.getUid(), clientUid);
        return deviceBLM;
    }

    @Override
    public void deleteDevice(UUID clientUid, UUID deviceUid) {

        DeviceDALM existingDevice = deviceRepository.findByUid(deviceUid);
        if (!clientUid.equals(existingDevice.getClientUuid())) {
            throw new SecurityException("Device doesn't belong to the authenticated client");
        }

        deviceRepository.delete(deviceUid);
        log.info("Device deleted: {} for client: {}", deviceUid, clientUid);
    }

    @Override
    public boolean deviceExists(UUID deviceUid) {
        // Просто проверяем существование устройства без проверки принадлежности
        return deviceRepository.exists(deviceUid);
    }

    @Override
    public Map<String, Object> getHealthStatus() {
        try {
            HealthCheckResponse authHealth = authKafkaClient.healthCheck("device-service")
                    .get(5, java.util.concurrent.TimeUnit.SECONDS);

            return Map.of(
                    "status", "OK",
                    "service", "device-service",
                    "timestamp", System.currentTimeMillis(),
                    "auth-service", authHealth.isSuccess() ? authHealth.getHealthStatus() : "UNAVAILABLE");
        } catch (Exception e) {
            log.error("Kafka Client: ", e);
            return Map.of(
                    "status", "DEGRADED",
                    "service", "device-service",
                    "timestamp", System.currentTimeMillis(),
                    "auth-service", "UNAVAILABLE",
                    "error", e.getMessage());
        }
    }
}package com.connection.device;

import java.util.List;
import java.util.Map;
import java.util.UUID;

import com.connection.device.model.DeviceBLM;

public interface DeviceService {
    DeviceBLM createDevice(UUID clientUid, DeviceBLM deviceBLM);
    DeviceBLM getDevice(UUID clientUid, UUID deviceUid);
    List<DeviceBLM> getDevicesByClient(UUID clientUid);
    DeviceBLM updateDevice(UUID clientUid, DeviceBLM deviceBLM);
    void deleteDevice(UUID clientUid, UUID deviceUid);
    boolean deviceExists(UUID deviceUid);
    Map<String, Object> getHealthStatus();
}package com.connection.device.config;

import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;
import io.swagger.v3.oas.annotations.security.SecurityScheme;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@SecurityScheme(
    name = "bearerAuth",
    type = SecuritySchemeType.HTTP,
    bearerFormat = "JWT",
    scheme = "bearer"
)
public class SwaggerConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("Device Service API")
                        .version("1.0")
                        .description("API для управления устройствами"))
                .addSecurityItem(new SecurityRequirement().addList("bearerAuth"))
                .components(new Components()
                        .addSecuritySchemes("bearerAuth", 
                            new io.swagger.v3.oas.models.security.SecurityScheme()
                                .type(io.swagger.v3.oas.models.security.SecurityScheme.Type.HTTP)
                                .scheme("bearer")
                                .bearerFormat("JWT")));
    }
}package com.connection.device.config;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import com.connection.device.repository.DeviceRepository;
import com.connection.device.repository.DeviceRepositorySQLImpl;

@Configuration
public class DeviceRepositoryConfig {
    @Bean("DeviceRepository")
    DeviceRepository deviceRepository(@Qualifier("DeviceJdbcTemplate") NamedParameterJdbcTemplate template){
        return new DeviceRepositorySQLImpl(template);
    }
}package com.connection.device.config;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;

import java.util.UUID;

@Component
public class SecurityUtils {

    public static UUID getCurrentClientUid() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        
        if (authentication == null || !authentication.isAuthenticated()) {
            throw new SecurityException("User not authenticated");
        }

        Object principal = authentication.getPrincipal();
        
        if (principal instanceof UUID) {
            return (UUID) principal;
        } else if (principal instanceof String) {
            try {
                return UUID.fromString((String) principal);
            } catch (IllegalArgumentException e) {
                throw new SecurityException("Invalid client UID format in principal");
            }
        } else {
            throw new SecurityException("Unexpected principal type: " + principal.getClass());
        }
    }

    public static String getCurrentClientUidAsString() {
        return getCurrentClientUid().toString();
    }
}package com.connection.device.config;

import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.admin.NewTopic;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.config.TopicBuilder;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.kafka.listener.CommonErrorHandler;
import org.springframework.kafka.listener.DefaultErrorHandler;
import org.springframework.kafka.support.serializer.ErrorHandlingDeserializer;
import org.springframework.kafka.support.serializer.JsonDeserializer;
import org.springframework.kafka.support.serializer.JsonSerializer;
import org.springframework.util.backoff.FixedBackOff;

import com.connection.auth.events.AuthEventConstants;
import com.connection.device.events.DeviceEventConstants;

@Configuration
public class DeviceKafkaConfig {
    @Value("${spring.kafka.bootstrap-servers:localhost:29092}")
    private String bootstrapServers;

    @Bean
    public NewTopic authResponsesTopic() {
        return TopicBuilder.name(AuthEventConstants.AUTH_RESPONSES_TOPIC)
                .partitions(3)
                .replicas(1)
                .build();
    }

    // Конфигурация топиков для device-service
    @Bean
    public NewTopic deviceCommandsTopic() {
        return TopicBuilder.name(DeviceEventConstants.DEVICE_COMMANDS_TOPIC)
                .partitions(3)
                .replicas(1)
                .build();
    }

    @Bean
    public NewTopic deviceResponsesTopic() {
        return TopicBuilder.name(DeviceEventConstants.DEVICE_RESPONSES_TOPIC)
                .partitions(3)
                .replicas(1)
                .build();
    }

    @Bean
    public NewTopic deviceEventsTopic() {
        return TopicBuilder.name(DeviceEventConstants.DEVICE_EVENTS_TOPIC)
                .partitions(3)
                .replicas(1)
                .build();
    }

    // Конфигурация для Consumer с обработкой ошибок десериализации
    @Bean
    public ConsumerFactory<String, Object> consumerFactory() {
        Map<String, Object> configProps = new HashMap<>();
        configProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        configProps.put(ConsumerConfig.GROUP_ID_CONFIG, "device-service-group");
        configProps.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
        configProps.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, ErrorHandlingDeserializer.class);
        configProps.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, ErrorHandlingDeserializer.class);
        
        // Конфигурация для ErrorHandlingDeserializer
        configProps.put(ErrorHandlingDeserializer.KEY_DESERIALIZER_CLASS, org.apache.kafka.common.serialization.StringDeserializer.class);
        configProps.put(ErrorHandlingDeserializer.VALUE_DESERIALIZER_CLASS, JsonDeserializer.class);
        
        // Конфигурация для JsonDeserializer
        configProps.put(JsonDeserializer.TRUSTED_PACKAGES, "com.connection.auth.events.commands,com.connection.common.events,com.connection.device.events.commands,com.connection.auth.events.responses");
        configProps.put(JsonDeserializer.USE_TYPE_INFO_HEADERS, true);
        configProps.put(JsonDeserializer.REMOVE_TYPE_INFO_HEADERS, false);
        configProps.put(JsonDeserializer.VALUE_DEFAULT_TYPE, "com.connection.common.events.Command");
        
        return new DefaultKafkaConsumerFactory<>(configProps);
    }

    @Bean
    public ConcurrentKafkaListenerContainerFactory<String, Object> kafkaListenerContainerFactory() {
        ConcurrentKafkaListenerContainerFactory<String, Object> factory = 
            new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(consumerFactory());
        
        // Обработка ошибок десериализации - пропускаем некорректные сообщения
                DefaultErrorHandler errorHandler = new DefaultErrorHandler(
                (record, exception) -> { // Логируем ошибку с помощью SLF4J
                    org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger("KafkaErrorHandler");
                    logger.error("Skipping invalid message - Topic: {}, Partition: {}, Offset: {}, Key: {}, Error: {}",
                            record.topic(),
                            record.partition(),
                            record.offset(),
                            record.key(),
                            exception.getMessage());
                },
                new FixedBackOff(0L, 0L) // Без повторных попыток
        );


        factory.setCommonErrorHandler(errorHandler);
        
        return factory;
    }

    // Конфигурация для Producer
    @Bean
    public ProducerFactory<String, Object> producerFactory() {
        Map<String, Object> configProps = new HashMap<>();
        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, org.apache.kafka.common.serialization.StringSerializer.class);
        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        configProps.put(JsonSerializer.ADD_TYPE_INFO_HEADERS, true);
        return new DefaultKafkaProducerFactory<>(configProps);
    }

    @Bean
    public KafkaTemplate<String, Object> kafkaTemplate() {
        return new KafkaTemplate<>(producerFactory());
    }
}package com.connection.device.config;

import java.util.Properties;
import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import com.atomikos.jdbc.AtomikosDataSourceBean;

@Configuration
public class DeviceJDBCConfig {
    
    @Value("${app.datasource.device.xa-data-source-class-name:org.postgresql.xa.PGXADataSource}")
    private String xaDataSourceClassName;

    @Value("${app.datasource.device.xa-properties.url}")
    private String jdbcUrl;

    @Value("${app.datasource.device.xa-properties.user}")
    private String username;

    @Value("${app.datasource.device.xa-properties.password}")
    private String password;

    @Value("${app.datasource.device.unique-resource-name:deviceXADataSource}")
    private String uniqueResourceName;

    @Bean("DeviceDataSource")
    DataSource deviceDataSource() {
        AtomikosDataSourceBean dataSource = new AtomikosDataSourceBean();
        dataSource.setUniqueResourceName(uniqueResourceName);
        dataSource.setXaDataSourceClassName(xaDataSourceClassName);
        
        Properties xaProperties = new Properties();
        xaProperties.setProperty("url", jdbcUrl);
        xaProperties.setProperty("user", username);
        xaProperties.setProperty("password", password);

        dataSource.setXaProperties(xaProperties);
        dataSource.setPoolSize(5);
        dataSource.setTestQuery("SELECT 1");

        return dataSource;
    }

    @Bean("DeviceJdbcTemplate")
    NamedParameterJdbcTemplate deviceNamedParameterJdbcTemplate(
            @Qualifier("DeviceDataSource") DataSource deviceDataSource) {
        return new NamedParameterJdbcTemplate(deviceDataSource);
    }
}// DeviceExceptionHandler.java
package com.connection.device.config;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import com.connection.device.exception.BaseDeviceException;
import com.connection.device.exception.DeviceAddException;
import com.connection.device.exception.DeviceAlreadyExistsException;
import com.connection.device.exception.DeviceNotFoundException;
import com.connection.device.exception.DeviceValidateException;

import java.util.HashMap;
import java.util.Map;

@RestControllerAdvice
public class DeviceExceptionHandler {

    @ExceptionHandler(DeviceAddException.class)
    public ResponseEntity<Map<String, Object>> handleDeviceAddException(DeviceAddException ex) {
        return createErrorResponse(
            "DEVICE_ADD_ERROR",
            "Cannot add device",
            ex.getMessage(),
            HttpStatus.BAD_REQUEST
        );
    }

    @ExceptionHandler(DeviceAlreadyExistsException.class)
    public ResponseEntity<Map<String, Object>> handleDeviceAlreadyExistsException(DeviceAlreadyExistsException ex) {
        return createErrorResponse(
            "DEVICE_ALREADY_EXISTS",
            "Device already exists",
            ex.getMessage(),
            HttpStatus.CONFLICT
        );
    }

    @ExceptionHandler(DeviceNotFoundException.class)
    public ResponseEntity<Map<String, Object>> handleDeviceNotFoundException(DeviceNotFoundException ex) {
        return createErrorResponse(
            "DEVICE_NOT_FOUND",
            "Device not found",
            ex.getMessage(),
            HttpStatus.NOT_FOUND
        );
    }

    @ExceptionHandler(DeviceValidateException.class)
    public ResponseEntity<Map<String, Object>> handleDeviceValidateException(DeviceValidateException ex) {
        return createErrorResponse(
            "DEVICE_VALIDATION_ERROR",
            "Device validation failed",
            ex.getMessage(),
            HttpStatus.BAD_REQUEST
        );
    }

    @ExceptionHandler(BaseDeviceException.class)
    public ResponseEntity<Map<String, Object>> handleBaseDeviceException(BaseDeviceException ex) {
        return createErrorResponse(
            "DEVICE_ERROR",
            "Device operation failed",
            ex.getMessage(),
            HttpStatus.INTERNAL_SERVER_ERROR
        );
    }

    private ResponseEntity<Map<String, Object>> createErrorResponse(
            String errorCode, 
            String errorMessage, 
            String details, 
            HttpStatus status) {
        
        Map<String, Object> errorResponse = new HashMap<>();
        errorResponse.put("timestamp", System.currentTimeMillis());
        errorResponse.put("status", status.value());
        errorResponse.put("error", status.getReasonPhrase());
        errorResponse.put("code", errorCode);
        errorResponse.put("message", errorMessage);
        errorResponse.put("details", details);
        
        return new ResponseEntity<>(errorResponse, status);
    }
}package com.connection.device.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.connection.device.converter.DeviceConverter;
import com.connection.device.validator.DeviceValidator;

@Configuration
public class DeviceUtilsConfig {
    @Bean("DeviceConverter")
    DeviceConverter deviceConverter(){
        return new DeviceConverter();
    }

    @Bean("DeviceValidator")
    DeviceValidator deviceValidator(){
        return new DeviceValidator();
    }
}package com.connection.device.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.transaction.jta.JtaTransactionManager;

import com.atomikos.icatch.jta.UserTransactionManager;

import jakarta.transaction.SystemException;

@Configuration
public class TransactionConfig {

    @Bean
    public UserTransactionManager userTransactionManager() throws SystemException{
        UserTransactionManager manager = new UserTransactionManager();
        manager.setTransactionTimeout(300);
        manager.setForceShutdown(true);
        return manager;
    }

    @Bean(name = "atomicosTransactionManager")
    public JtaTransactionManager jtaTransactionManager() throws SystemException {
        JtaTransactionManager jtaTransactionManager = new JtaTransactionManager();
        jtaTransactionManager.setTransactionManager(userTransactionManager());
        jtaTransactionManager.setUserTransaction(userTransactionManager());
        return jtaTransactionManager;
    }
}package com.connection.device.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.connection.device.client.JwtKafkaAuthenticationFilter;
import com.connection.device.kafka.TypedAuthKafkaClient;

import lombok.RequiredArgsConstructor;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity(prePostEnabled = true)
@RequiredArgsConstructor
public class SecurityConfig {

    private final TypedAuthKafkaClient authKafkaClient;

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        return http
                .csrf(csrf -> csrf.disable())
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/swagger-ui.html").permitAll()
                        .requestMatchers("/swagger-ui/**").permitAll()
                        .requestMatchers("/api-docs/**").permitAll()
                        .requestMatchers("/webjars/**").permitAll()
                        .requestMatchers("/v3/api-docs/**").permitAll()
                        .requestMatchers("/api/device-service/**").authenticated()
                        .requestMatchers("/api/device-service/health").permitAll()
                        .anyRequest().denyAll()
                )
                .addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class)
                .build();
    }

    @Bean
    public JwtKafkaAuthenticationFilter jwtAuthenticationFilter() {
        return new JwtKafkaAuthenticationFilter(authKafkaClient);
    }
}   package com.connection.device.kafka;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Component;

import com.connection.device.events.commands.GetDeviceByUidCommand;
import com.connection.device.events.commands.GetDevicesByClientUid;
import com.connection.device.events.commands.HealthCheckCommand;
import com.connection.device.events.responses.GetDeviceByUidResponse;
import com.connection.device.events.responses.GetDevicesByClientResponse;
import com.connection.device.events.responses.HealthCheckResponse;
import com.connection.common.events.Command;
import com.connection.device.DeviceService;
import com.connection.device.converter.DeviceConverter;
import com.connection.device.model.DeviceBLM;
import com.connection.device.model.DeviceDTO;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import java.util.List;
import java.util.stream.Collectors;

@Slf4j
@Component
@RequiredArgsConstructor
public class DeviceCommandConsumer {

    private final DeviceService deviceService;
    private final DeviceConverter deviceConverter;
    private final KafkaTemplate<String, Object> kafkaTemplate; // Используем ЕДИНЫЙ kafkaTemplate

    // Используем ЕДИНУЮ фабрику
    @KafkaListener(topics = "${app.kafka.topics.device-commands:device.commands}")
    public void handleDeviceCommand(ConsumerRecord<String, Command> record) {
        try {
            Command command = record.value();
            String key = record.key();

            log.info("Received device command: {} with key: {}", command.getClass().getSimpleName(), key);

            if (command instanceof GetDeviceByUidCommand) {
                GetDeviceByUidCommand getDeviceCommand = (GetDeviceByUidCommand) command;
                handleGetDeviceByUidCommand(getDeviceCommand, key);
            } else if (command instanceof GetDevicesByClientUid) {
                GetDevicesByClientUid getDevicesCommand = (GetDevicesByClientUid) command;
                handleGetDevicesByClientCommand(getDevicesCommand, key);
            } else if (command instanceof HealthCheckCommand) {
                HealthCheckCommand healthCommand = (HealthCheckCommand) command;
                handleHealthCheckCommand(healthCommand, key);
            } else {
                log.warn("Unknown device command type: {}", command.getClass().getCanonicalName());
            }

        } catch (Exception e) {
            log.error("Error processing device command: key={}", record.key(), e);
        }
    }

    private void handleGetDeviceByUidCommand(GetDeviceByUidCommand command, String key) {
        try {
            log.info("Processing GetDeviceByUidCommand for device UID: {}", command.getDeviceUid());

            DeviceBLM deviceBLM = deviceService.getDevice(command.getClientUid(), command.getDeviceUid());
            DeviceDTO deviceDTO = deviceConverter.toDTO(deviceBLM);

            GetDeviceByUidResponse response = GetDeviceByUidResponse.success(
                    command.getCorrelationId(),
                    deviceDTO);

            kafkaTemplate.send(command.getReplyTopic(), command.getCorrelationId(), response);
            log.info("Successfully processed GetDeviceByUidCommand for device: {}", command.getDeviceUid());

        } catch (Exception e) {
            log.error("Error processing GetDeviceByUidCommand for device UID: {}", command.getDeviceUid(), e);

            GetDeviceByUidResponse response = GetDeviceByUidResponse.error(
                    command.getCorrelationId(),
                    e.getMessage());

            kafkaTemplate.send(command.getReplyTopic(), command.getCorrelationId(), response);
        }
    }

    private void handleGetDevicesByClientCommand(GetDevicesByClientUid command, String key) {
        try {
            log.info("Processing GetDevicesByClientCommand for client UID: {}", command.getClientUid());

            List<DeviceBLM> devicesBLM = deviceService.getDevicesByClient(command.getClientUid());
            List<DeviceDTO> deviceDTOs = devicesBLM.stream()
                    .map(deviceConverter::toDTO)
                    .collect(Collectors.toList());

            GetDevicesByClientResponse response = GetDevicesByClientResponse.valid(
                    command.getCorrelationId(),
                    deviceDTOs);

            kafkaTemplate.send(command.getReplyTopic(), command.getCorrelationId(), response);

            log.info("Successfully processed GetDevicesByClientCommand for client: {}, found {} devices",
                    command.getClientUid(), deviceDTOs.size());

        } catch (Exception e) {
            log.error("Error processing GetDevicesByClientCommand for client UID: {}", command.getClientUid(), e);

            GetDevicesByClientResponse response = GetDevicesByClientResponse.error(
                    command.getCorrelationId(),
                    e.getMessage());

            kafkaTemplate.send(command.getReplyTopic(), command.getCorrelationId(), response);
        }
    }

    private void handleHealthCheckCommand(HealthCheckCommand command, String key) {
        try {
            log.info("Processing HealthCheckCommand");

            var healthStatus = deviceService.getHealthStatus();

            HealthCheckResponse response = HealthCheckResponse.success(
                    command.getCorrelationId(),
                    healthStatus);

            kafkaTemplate.send(command.getReplyTopic(), command.getCorrelationId(), response);

            log.info("Successfully processed HealthCheckCommand");

        } catch (Exception e) {
            log.error("Error processing HealthCheckCommand", e);

            HealthCheckResponse response = HealthCheckResponse.error(
                    command.getCorrelationId(),
                    e.getMessage());

            kafkaTemplate.send(command.getReplyTopic(), command.getCorrelationId(), response);
        }
    }
}package com.connection.device.kafka;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;

import com.connection.auth.events.responses.TokenValidationResponse;
import com.connection.common.events.CommandResponse;
import com.connection.auth.events.responses.ClientUidResponse;
import com.connection.auth.events.responses.HealthCheckResponse;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
@RequiredArgsConstructor
public class AuthResponseConsumer {

    private final TypedAuthKafkaClient authKafkaClient;

    @KafkaListener(topics = "${app.kafka.topics.auth-responses:auth.responses}")
    public void handleAuthResponse(ConsumerRecord<String, CommandResponse> record) {
        try {
            CommandResponse message = record.value();
            String correlationId = record.key();
            
            log.info("Received auth response: correlationId={}", correlationId);
                
            if (message instanceof TokenValidationResponse) {
                TokenValidationResponse typedResponse = (TokenValidationResponse) message;
                authKafkaClient.handleResponse(correlationId, typedResponse);
            } else if (message instanceof ClientUidResponse) {
                ClientUidResponse typedResponse = (ClientUidResponse) message;
                authKafkaClient.handleResponse(correlationId, typedResponse);
            } else if (message instanceof HealthCheckResponse) {
                HealthCheckResponse typedResponse = (HealthCheckResponse) message;
                authKafkaClient.handleResponse(correlationId, typedResponse);
            } else {
                log.warn("Unknown response type for correlationId: {}", correlationId);
            }
            
        } catch (Exception e) {
            log.error("Error processing auth response: correlationId={}", record.key(), e);
        }
    }
}package com.connection.device.kafka;

import java.util.Date;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Component;

import com.connection.auth.events.AuthEventConstants;
import com.connection.auth.events.AuthEventUtils;
import com.connection.auth.events.commands.ExtractClientUidCommand;
import com.connection.auth.events.commands.HealthCheckCommand;
import com.connection.auth.events.commands.ValidateTokenCommand;
import com.connection.auth.events.responses.ClientUidResponse;
import com.connection.auth.events.responses.HealthCheckResponse;
import com.connection.auth.events.responses.TokenValidationResponse;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
@RequiredArgsConstructor
public class TypedAuthKafkaClient {

    private final KafkaTemplate<String, Object> kafkaTemplate;
    
    private final Map<String, PendingRequest<?>> pendingRequests = new ConcurrentHashMap<>();

    private static class PendingRequest<T> {
        final CompletableFuture<T> future;
        final Class<T> responseType;

        PendingRequest(CompletableFuture<T> future, Class<T> responseType) {
            this.future = future;
            this.responseType = responseType;
        }
    }

    public CompletableFuture<TokenValidationResponse> validateToken(String token, String sourceService) {
        return sendRequest(
            ValidateTokenCommand.builder()
                .token(token)
                .tokenType(ValidateTokenCommand.TokenType.ACCESS)
                .sourceService(sourceService)
                .replyTopic(AuthEventConstants.AUTH_RESPONSES_TOPIC)
                .correlationId(AuthEventUtils.generateCorrelationId())
                .build(),
            TokenValidationResponse.class
        );
    }

    public CompletableFuture<ClientUidResponse> getClientUid(String token, String sourceService) {
        return sendRequest(
            ExtractClientUidCommand.builder()
                .token(token)
                .tokenType(ExtractClientUidCommand.TokenType.ACCESS)
                .sourceService(sourceService)
                .replyTopic(AuthEventConstants.AUTH_RESPONSES_TOPIC)
                .correlationId(AuthEventUtils.generateCorrelationId())
                .build(),
            ClientUidResponse.class
        );
    }

    public CompletableFuture<HealthCheckResponse> healthCheck(String sourceService) {
        return sendRequest(
            HealthCheckCommand.builder()
                .eventId(UUID.randomUUID().toString())
                .sourceService(sourceService)
                .timestamp(new Date().toInstant())
                .replyTopic(AuthEventConstants.AUTH_RESPONSES_TOPIC)
                .correlationId(AuthEventUtils.generateCorrelationId())
                .commandType(AuthEventConstants.COMMAND_HEALTH_CHECK)
                .build(),
            HealthCheckResponse.class
        );
    }

    private <T> CompletableFuture<T> sendRequest(Object command, Class<T> responseType) {
        String correlationId;
        
        if (command instanceof ValidateTokenCommand) {
            correlationId = ((ValidateTokenCommand) command).getCorrelationId();
        } else if (command instanceof ExtractClientUidCommand) {
            correlationId = ((ExtractClientUidCommand) command).getCorrelationId();
        } else if (command instanceof HealthCheckCommand) {
            correlationId = ((HealthCheckCommand) command).getCorrelationId();
        } else {
            throw new IllegalArgumentException("Unsupported command type: " + command.getClass());
        }

        CompletableFuture<T> future = new CompletableFuture<>();
        pendingRequests.put(correlationId, new PendingRequest<>(future, responseType));

        kafkaTemplate.send(AuthEventConstants.AUTH_COMMANDS_TOPIC, correlationId, command)
                .whenComplete((result, ex) -> {
                    if (ex != null) {
                        future.completeExceptionally(ex);
                        pendingRequests.remove(correlationId);
                        log.error("Failed to send command: {}", ex.getMessage());
                    }
                });

        return future;
    }

    @SuppressWarnings("unchecked")
    public void handleResponse(String correlationId, Object response) {
        PendingRequest<?> pendingRequest = pendingRequests.remove(correlationId);
        if (pendingRequest != null) {
            try {
                if (pendingRequest.responseType.isInstance(response)) {
                    CompletableFuture<Object> future = (CompletableFuture<Object>) pendingRequest.future;
                    future.complete(response);
                } else {
                    log.warn("Type mismatch for correlationId: {}. Expected: {}, Got: {}", 
                            correlationId, pendingRequest.responseType, response.getClass());
                    pendingRequest.future.completeExceptionally(
                        new ClassCastException("Type mismatch in response")
                    );
                }
            } catch (Exception e) {
                pendingRequest.future.completeExceptionally(e);
            }
        } else {
            log.warn("Received response for unknown correlationId: {}", correlationId);
        }
    }
}package com.connection.device;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DeviceServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(DeviceServiceApplication.class, args);
	}

}
package com.connection.device;

import java.util.List;
import java.util.UUID;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.connection.device.config.SecurityUtils;
import com.connection.device.converter.DeviceConverter;
import com.connection.device.model.DeviceBLM;
import com.connection.device.model.DeviceDTO;
import com.connection.device.validator.DeviceValidator;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/device-service")
public class DeviceController {
    
    private final DeviceService deviceService;
    private final DeviceValidator deviceValidator;
    private final DeviceConverter deviceConverter;

    @PostMapping("/devices")
    public ResponseEntity<DeviceBLM> createDevice(@RequestBody DeviceDTO deviceDTO) {
        UUID clientUuid = SecurityUtils.getCurrentClientUid();
        log.info("Creating device for client " + clientUuid);

        deviceValidator.validate(deviceDTO);
        DeviceBLM deviceBLM = deviceConverter.toBLM(deviceDTO);

        UUID clientUid = SecurityUtils.getCurrentClientUid();
        DeviceBLM device = deviceService.createDevice(clientUid, deviceBLM);
        return ResponseEntity.ok(device);
    }

    @GetMapping("/devices/{deviceUid}")
    public ResponseEntity<DeviceBLM> getDevice(@PathVariable UUID deviceUid) {
        log.info("Getting device: {}", deviceUid);

        UUID clientUid = SecurityUtils.getCurrentClientUid();
        DeviceBLM device = deviceService.getDevice(clientUid, deviceUid);
        return ResponseEntity.ok(device);
    }

    @GetMapping("/devices")
    public ResponseEntity<List<DeviceBLM>> getDevicesByClient() {
        log.info("Getting all devices for client");
        UUID clientUid = SecurityUtils.getCurrentClientUid();
        List<DeviceBLM> devices = deviceService.getDevicesByClient(clientUid);
        return ResponseEntity.ok(devices);
    }

    @PutMapping("/device")
    public ResponseEntity<DeviceBLM> updateDevice(
            @RequestBody DeviceDTO deviceDTO) {            
        deviceValidator.validate(deviceDTO);
        UUID clientUuid = SecurityUtils.getCurrentClientUid();
        log.info("Updating device: {}, for client: {}", deviceDTO.getUid(), clientUuid);
        
        UUID clientUid = SecurityUtils.getCurrentClientUid();
        
        DeviceBLM deviceBLM = deviceConverter.toBLM(deviceDTO);
        DeviceBLM device = deviceService.updateDevice(clientUid, deviceBLM);
        return ResponseEntity.ok(device);
    }

    @DeleteMapping("/devices/{deviceUid}")
    public ResponseEntity<Void> deleteDevice(@PathVariable UUID deviceUid) {
        log.info("Deleting device: {}", deviceUid);
        UUID clientUid = SecurityUtils.getCurrentClientUid();
        
        deviceService.deleteDevice(clientUid, deviceUid);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/health")
    public ResponseEntity<?> healthCheck() {
        log.info("Health check: status: OK, service: device-service, timestamp: {}", 
                System.currentTimeMillis());

        return ResponseEntity.ok().body(deviceService.getHealthStatus());
    }
}package com.connection.device.client;

import com.connection.device.kafka.TypedAuthKafkaClient;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import com.connection.auth.events.responses.TokenValidationResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.Collections;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;

@Slf4j
@Component
@RequiredArgsConstructor
public class JwtKafkaAuthenticationFilter extends OncePerRequestFilter {

    private final TypedAuthKafkaClient authKafkaClient;
    private static final String AUTH_HEADER = "Authorization";
    private static final String BEARER_PREFIX = "Bearer ";

    @Override
    protected void doFilterInternal(HttpServletRequest request,
            HttpServletResponse response,
            FilterChain filterChain) throws ServletException, IOException {

        String authHeader = request.getHeader(AUTH_HEADER);

        if (authHeader == null || !authHeader.startsWith(BEARER_PREFIX)) {
            filterChain.doFilter(request, response);
            return;
        }

        String jwtToken = authHeader.substring(BEARER_PREFIX.length());

        try {
            authenticateWithToken(jwtToken, request);
        } catch (Exception e) {
            log.error("Authentication failed for token: {}", e.getMessage());
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            return;
        }

        filterChain.doFilter(request, response);
    }

    private void authenticateWithToken(String token, HttpServletRequest request) {
        try {
            String cleanToken = token.trim();
            cleanToken = cleanToken.replace("Bearer ", "");

            log.info("Validating token: {}...", cleanToken);

            CompletableFuture<TokenValidationResponse> validationFuture = authKafkaClient.validateToken(cleanToken,
                    "device-service");

            TokenValidationResponse validationResponse = validationFuture
                    .get(10, TimeUnit.SECONDS);

            if (!validationResponse.isValid()) {
                throw new SecurityException("Token validation failed: " + validationResponse.getError());
            }

            UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
                    validationResponse.getClientUid(),
                    null,
                    Collections.singletonList(new SimpleGrantedAuthority("ROLE_USER")));

            authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
            SecurityContextHolder.getContext().setAuthentication(authentication);

            log.info("Successfully authenticated client: {}", validationResponse.getClientUid());

        } catch (java.util.concurrent.TimeoutException e) {
            throw new SecurityException("Token validation timeout");
        } catch (java.util.concurrent.ExecutionException e) {
            throw new SecurityException("Token validation error: " + e.getCause().getMessage());
        } catch (Exception e) {
            throw new SecurityException("Authentication failed: " + e.getMessage());
        }
    }
}package com.connection.device;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;

import com.connection.auth.events.AuthEventConstants;
import com.connection.auth.events.commands.ExtractClientUidCommand;
import com.connection.auth.events.commands.HealthCheckCommand;
import com.connection.auth.events.commands.ValidateTokenCommand;
import com.connection.auth.events.responses.ClientUidResponse;
import com.connection.auth.events.responses.HealthCheckResponse;
import com.connection.auth.events.responses.TokenValidationResponse;
import com.connection.device.kafka.TypedAuthKafkaClient;

@ExtendWith(MockitoExtension.class)
@DisplayName("Typed Auth Kafka Client Tests")
class TypedAuthKafkaClientTest {

    @Mock
    private KafkaTemplate<String, Object> kafkaTemplate;

    @Captor
    private ArgumentCaptor<Object> commandCaptor;

    @Captor
    private ArgumentCaptor<String> topicCaptor;

    @Captor
    private ArgumentCaptor<String> keyCaptor;

    private TypedAuthKafkaClient authKafkaClient;

    @BeforeEach
    void setUp() {
        authKafkaClient = new TypedAuthKafkaClient(kafkaTemplate);
    }

    @Test
    @DisplayName("Validate token - sends correct command")
    void shouldSendValidateTokenCommand() {
        // Arrange
        String token = "test-token";
        String sourceService = "device-service";
        
        when(kafkaTemplate.send(anyString(), anyString(), any(ValidateTokenCommand.class)))
            .thenReturn(CompletableFuture.completedFuture(null));

        // Act
        CompletableFuture<TokenValidationResponse> future = 
            authKafkaClient.validateToken(token, sourceService);

        // Assert
        verify(kafkaTemplate).send(topicCaptor.capture(), keyCaptor.capture(), commandCaptor.capture());
        
        assertThat(topicCaptor.getValue()).isEqualTo(AuthEventConstants.AUTH_COMMANDS_TOPIC);
        assertThat(keyCaptor.getValue()).isNotNull();
        
        ValidateTokenCommand command = (ValidateTokenCommand) commandCaptor.getValue();
        assertThat(command.getToken()).isEqualTo(token);
        assertThat(command.getSourceService()).isEqualTo(sourceService);
        assertThat(command.getReplyTopic()).isEqualTo(AuthEventConstants.AUTH_RESPONSES_TOPIC);
        assertThat(command.getTokenType()).isEqualTo(ValidateTokenCommand.TokenType.ACCESS);
    }

    @Test
    @DisplayName("Get client UID - sends correct command")
    void shouldSendExtractClientUidCommand() {
        // Arrange
        String token = "test-token";
        String sourceService = "device-service";
        
        when(kafkaTemplate.send(anyString(), anyString(), any(ExtractClientUidCommand.class)))
            .thenReturn(CompletableFuture.completedFuture(null));

        // Act
        CompletableFuture<ClientUidResponse> future = 
            authKafkaClient.getClientUid(token, sourceService);

        // Assert
        verify(kafkaTemplate).send(topicCaptor.capture(), keyCaptor.capture(), commandCaptor.capture());
        
        assertThat(topicCaptor.getValue()).isEqualTo(AuthEventConstants.AUTH_COMMANDS_TOPIC);
        
        ExtractClientUidCommand command = (ExtractClientUidCommand) commandCaptor.getValue();
        assertThat(command.getToken()).isEqualTo(token);
        assertThat(command.getSourceService()).isEqualTo(sourceService);
        assertThat(command.getReplyTopic()).isEqualTo(AuthEventConstants.AUTH_RESPONSES_TOPIC);
    }

    @Test
    @DisplayName("Health check - sends correct command")
    void shouldSendHealthCheckCommand() {
        // Arrange
        String sourceService = "device-service";
        
        when(kafkaTemplate.send(anyString(), anyString(), any(HealthCheckCommand.class)))
            .thenReturn(CompletableFuture.completedFuture(null));

        // Act
        CompletableFuture<HealthCheckResponse> future = 
            authKafkaClient.healthCheck(sourceService);

        // Assert
        verify(kafkaTemplate).send(topicCaptor.capture(), keyCaptor.capture(), commandCaptor.capture());
        
        assertThat(topicCaptor.getValue()).isEqualTo(AuthEventConstants.AUTH_COMMANDS_TOPIC);
        
        HealthCheckCommand command = (HealthCheckCommand) commandCaptor.getValue();
        assertThat(command.getSourceService()).isEqualTo(sourceService);
        assertThat(command.getReplyTopic()).isEqualTo(AuthEventConstants.AUTH_RESPONSES_TOPIC);
    }

    @Test
    @DisplayName("Handle response - completes future for matching correlation ID")
    void shouldCompleteFutureWhenResponseReceived() throws Exception {
        // Arrange
        String correlationId = "test-correlation-id";
        String token = "test-token";
        String sourceService = "device-service";
        
        when(kafkaTemplate.send(anyString(), anyString(), any(ValidateTokenCommand.class)))
            .thenReturn(CompletableFuture.completedFuture(null));

        CompletableFuture<TokenValidationResponse> future = 
            authKafkaClient.validateToken(token, sourceService);
        
        // Extract correlation ID from sent command
        verify(kafkaTemplate).send(anyString(), keyCaptor.capture(), any());
        String actualCorrelationId = keyCaptor.getValue();

        TokenValidationResponse response = TokenValidationResponse.valid(
            actualCorrelationId, java.util.UUID.randomUUID(), "ACCESS");

        // Act
        authKafkaClient.handleResponse(actualCorrelationId, response);

        // Assert
        TokenValidationResponse result = future.get(1, TimeUnit.SECONDS);
        assertThat(result).isEqualTo(response);
        assertThat(result.isValid()).isTrue();
    }

    @Test
    @DisplayName("Handle response - ignores unknown correlation ID")
    void shouldIgnoreResponseForUnknownCorrelationId() {
        // Arrange
        String unknownCorrelationId = "unknown-correlation-id";
        TokenValidationResponse response = TokenValidationResponse.valid(
            unknownCorrelationId, java.util.UUID.randomUUID(), "ACCESS");

        // Act
        authKafkaClient.handleResponse(unknownCorrelationId, response);

        // Assert - No exception should be thrown
        assertThat(true).isTrue(); // Just to have an assertion
    }

    @Test
    @DisplayName("Handle response - completes exceptionally for type mismatch")
    void shouldCompleteExceptionallyForTypeMismatch() {
        // Arrange
        String correlationId = "test-correlation-id";
        String token = "test-token";
        String sourceService = "device-service";
        
        when(kafkaTemplate.send(anyString(), anyString(), any(ValidateTokenCommand.class)))
            .thenReturn(CompletableFuture.completedFuture(null));

        CompletableFuture<TokenValidationResponse> future = 
            authKafkaClient.validateToken(token, sourceService);
        
        verify(kafkaTemplate).send(anyString(), keyCaptor.capture(), any());
        String actualCorrelationId = keyCaptor.getValue();

        // Wrong response type
        ClientUidResponse wrongResponse = ClientUidResponse.success(
            actualCorrelationId, java.util.UUID.randomUUID(), "ACCESS");

        // Act
        authKafkaClient.handleResponse(actualCorrelationId, wrongResponse);

        // Assert
        assertThatThrownBy(() -> future.get(1, TimeUnit.SECONDS))
            .isInstanceOf(ExecutionException.class)
            .hasCauseInstanceOf(ClassCastException.class);
    }

    @Test
    @DisplayName("Send request - handles Kafka send failure")
    void shouldHandleKafkaSendFailure() {
        // Arrange
        String token = "test-token";
        String sourceService = "device-service";
        
        CompletableFuture<SendResult<String, Object>> failedFuture = new CompletableFuture<>();
        failedFuture.completeExceptionally(new RuntimeException("Kafka error"));
        
        when(kafkaTemplate.send(anyString(), anyString(), any(ValidateTokenCommand.class)))
            .thenReturn(failedFuture);

        // Act
        CompletableFuture<TokenValidationResponse> future = 
            authKafkaClient.validateToken(token, sourceService);

        // Assert
        assertThatThrownBy(() -> future.get(1, TimeUnit.SECONDS))
            .isInstanceOf(ExecutionException.class)
            .hasMessageContaining("Kafka error");
    }
}package com.connection.device.mother;

import java.util.UUID;

import com.connection.device.model.DeviceBLM;
import com.connection.device.model.DeviceDALM;
import com.connection.device.model.DeviceDTO;

public class DeviceObjectMother {

    public static final UUID CLIENT_UUID = UUID.fromString("123e4567-e89b-12d3-a456-426614174000");
    public static final UUID DEVICE_UUID = UUID.fromString("223e4567-e89b-12d3-a456-426614174001");
    public static final String VALID_TOKEN = "valid-token-123";
    public static final String INVALID_TOKEN = "invalid-token-456";

    public static DeviceDTO createValidDeviceDTO() {
        return new DeviceDTO(
            DEVICE_UUID.toString(),
            CLIENT_UUID.toString(),
            "Test Device",
            "Test Description"
        );
    }

    public static DeviceDTO createInvalidDeviceDTO() {
        return new DeviceDTO(
            "invalid-uuid",
            "invalid-client-uuid",
            "", // empty name
            null // null description
        );
    }

    public static DeviceBLM createValidDeviceBLM() {
        return new DeviceBLM(
            DEVICE_UUID,
            CLIENT_UUID,
            "Test Device",
            "Test Description"
        );
    }

    public static DeviceDALM createValidDeviceDALM() {
        return new DeviceDALM(
            DEVICE_UUID,
            CLIENT_UUID,
            "Test Device",
            "Test Description"
        );
    }

    public static DeviceDTO createDeviceDTOWithDifferentClient() {
        return new DeviceDTO(
            DEVICE_UUID.toString(),
            UUID.randomUUID().toString(), // different client
            "Test Device",
            "Test Description"
        );
    }
}package com.connection.device;

import static com.connection.device.mother.DeviceObjectMother.CLIENT_UUID;
import static com.connection.device.mother.DeviceObjectMother.DEVICE_UUID;
import static com.connection.device.mother.DeviceObjectMother.createValidDeviceBLM;
import static com.connection.device.mother.DeviceObjectMother.createValidDeviceDALM;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;

import com.connection.auth.events.responses.HealthCheckResponse;
import com.connection.device.converter.DeviceConverter;
import com.connection.device.exception.DeviceAlreadyExistsException;
import com.connection.device.kafka.TypedAuthKafkaClient;
import com.connection.device.model.DeviceBLM;
import com.connection.device.model.DeviceDALM;
import com.connection.device.repository.DeviceRepository;
import com.connection.device.validator.DeviceValidator;

@ExtendWith(MockitoExtension.class)
@DisplayName("Device Service Implementation Tests - Kafka Version")
class DeviceServiceImplTest {

    @Mock
    private DeviceRepository deviceRepository;

    @Mock
    private DeviceConverter deviceConverter;

    @Mock
    private DeviceValidator deviceValidator;

    @Mock
    private TypedAuthKafkaClient authKafkaClient;

    @Mock
    private SecurityContext securityContext;

    @InjectMocks
    private DeviceServiceImpl deviceService;

    @BeforeEach
    void setUp() {
        SecurityContextHolder.setContext(securityContext);
    }

    private void setupAuthentication(UUID clientUid) {
        UsernamePasswordAuthenticationToken authentication = 
            new UsernamePasswordAuthenticationToken(clientUid, null, Collections.emptyList());
        when(securityContext.getAuthentication()).thenReturn(authentication);
    }

    @Test
    @DisplayName("Create device - Positive")
    void shouldCreateDeviceWhenValidData() {
        // Arrange
        DeviceBLM deviceBLM = createValidDeviceBLM();
        DeviceDALM deviceDALM = createValidDeviceDALM();
        
        // setupAuthentication(CLIENT_UUID);
        when(deviceConverter.toDALM(deviceBLM)).thenReturn(deviceDALM);
        when(deviceRepository.existsByClientAndName(CLIENT_UUID, "Test Device")).thenReturn(false);

        // Act
        DeviceBLM result = deviceService.createDevice(CLIENT_UUID, deviceBLM);

        // Assert
        assertThat(result).isNotNull();
        assertThat(result.getUid()).isEqualTo(DEVICE_UUID);
        verify(deviceValidator).validate(deviceBLM);
        verify(deviceRepository).add(deviceDALM);
    }

    @Test
    @DisplayName("Create device - Negative: Client UID mismatch")
    void shouldThrowExceptionWhenClientUidMismatch() {
        // Arrange
        UUID differentClientUuid = UUID.randomUUID();
        DeviceBLM deviceBLM = new DeviceBLM(
                DEVICE_UUID,
                differentClientUuid,
                "Test Device",
                "Test Description");

        // setupAuthentication(CLIENT_UUID);

        // Act & Assert
        assertThatThrownBy(() -> deviceService.createDevice(CLIENT_UUID, deviceBLM))
                .isInstanceOf(SecurityException.class)
                .hasMessageContaining("Client UID from token doesn't match device client UID");

        verify(deviceValidator).validate(deviceBLM);
        verify(deviceRepository, never()).add(any());
    }

    @Test
    @DisplayName("Create device - Negative: Device already exists")
    void shouldThrowExceptionWhenDeviceAlreadyExists() {
        // Arrange
        DeviceBLM deviceBLM = createValidDeviceBLM();
        
        // setupAuthentication(CLIENT_UUID);
        when(deviceRepository.existsByClientAndName(CLIENT_UUID, "Test Device")).thenReturn(true);

        // Act & Assert
        assertThatThrownBy(() -> deviceService.createDevice(CLIENT_UUID, deviceBLM))
                .isInstanceOf(DeviceAlreadyExistsException.class);

        verify(deviceValidator).validate(deviceBLM);
        verify(deviceRepository, never()).add(any());
    }

    @Test
    @DisplayName("Get device - Positive")
    void shouldGetDeviceWhenValidRequest() {
        // Arrange
        DeviceDALM deviceDALM = createValidDeviceDALM();
        DeviceBLM expectedBLM = createValidDeviceBLM();

        //setupAuthentication(CLIENT_UUID);
        when(deviceRepository.findByUid(DEVICE_UUID)).thenReturn(deviceDALM);
        when(deviceConverter.toBLM(deviceDALM)).thenReturn(expectedBLM);

        // Act
        DeviceBLM result = deviceService.getDevice(CLIENT_UUID, DEVICE_UUID);

        // Assert
        assertThat(result).isNotNull();
        assertThat(result.getUid()).isEqualTo(DEVICE_UUID);
        verify(deviceRepository).findByUid(DEVICE_UUID);
    }

    @Test
    @DisplayName("Get device - Negative: Device doesn't belong to client")
    void shouldThrowExceptionWhenDeviceNotBelongsToClient() {
        // Arrange
        UUID differentClientUuid = UUID.randomUUID();
        DeviceDALM deviceDALM = new DeviceDALM(
                DEVICE_UUID,
                differentClientUuid,
                "Test Device",
                "Test Description");

        //setupAuthentication(CLIENT_UUID);
        when(deviceRepository.findByUid(DEVICE_UUID)).thenReturn(deviceDALM);

        // Act & Assert
        assertThatThrownBy(() -> deviceService.getDevice(CLIENT_UUID, DEVICE_UUID))
                .isInstanceOf(SecurityException.class)
                .hasMessageContaining("doesn't belong");

        verify(deviceRepository).findByUid(DEVICE_UUID);
        verify(deviceConverter, never()).toBLM(any(DeviceDALM.class));
    }

    @Test
    @DisplayName("Get devices by client - Positive")
    void shouldGetDevicesByClientWhenValidRequest() {
        // Arrange
        DeviceDALM deviceDALM = createValidDeviceDALM();
        DeviceBLM expectedBLM = createValidDeviceBLM();
        List<DeviceDALM> devicesDALM = Collections.singletonList(deviceDALM);

        //setupAuthentication(CLIENT_UUID);
        when(deviceRepository.findByClientUuid(CLIENT_UUID)).thenReturn(devicesDALM);
        when(deviceConverter.toBLM(deviceDALM)).thenReturn(expectedBLM);

        // Act
        List<DeviceBLM> result = deviceService.getDevicesByClient(CLIENT_UUID);

        // Assert
        assertThat(result).isNotEmpty();
        assertThat(result.get(0).getUid()).isEqualTo(DEVICE_UUID);
        verify(deviceRepository).findByClientUuid(CLIENT_UUID);
    }

    @Test
    @DisplayName("Update device - Positive")
    void shouldUpdateDeviceWhenValidData() {
        // Arrange
        DeviceBLM deviceBLM = createValidDeviceBLM();
        DeviceDALM deviceDALM = createValidDeviceDALM();
        DeviceDALM existingDevice = createValidDeviceDALM();

        //setupAuthentication(CLIENT_UUID);
        when(deviceRepository.findByUid(DEVICE_UUID)).thenReturn(existingDevice);
        when(deviceConverter.toDALM(deviceBLM)).thenReturn(deviceDALM);

        // Act
        DeviceBLM result = deviceService.updateDevice(CLIENT_UUID, deviceBLM);

        // Assert
        assertThat(result).isNotNull();
        verify(deviceValidator).validate(deviceBLM);
        verify(deviceRepository).update(deviceDALM);
    }

    @Test
    @DisplayName("Delete device - Positive")
    void shouldDeleteDeviceWhenValidRequest() {
        // Arrange
        DeviceDALM existingDevice = createValidDeviceDALM();

        //setupAuthentication(CLIENT_UUID);
        when(deviceRepository.findByUid(DEVICE_UUID)).thenReturn(existingDevice);

        // Act
        deviceService.deleteDevice(CLIENT_UUID, DEVICE_UUID);

        // Assert
        verify(deviceRepository).delete(DEVICE_UUID);
    }

    @Test
    @DisplayName("Device exists - Positive")
    void shouldReturnTrueWhenDeviceExists() {
        // Arrange
        when(deviceRepository.exists(DEVICE_UUID)).thenReturn(true);

        // Act
        boolean result = deviceService.deviceExists(DEVICE_UUID);

        // Assert
        assertThat(result).isTrue();
        verify(deviceRepository).exists(DEVICE_UUID);
    }

    @Test
    @DisplayName("Device exists - Negative: Device not found")
    void shouldReturnFalseWhenDeviceNotExists() {
        // Arrange
        when(deviceRepository.exists(DEVICE_UUID)).thenReturn(false);

        // Act
        boolean result = deviceService.deviceExists(DEVICE_UUID);

        // Assert
        assertThat(result).isFalse();
        verify(deviceRepository).exists(DEVICE_UUID);
    }

    @Test
    @DisplayName("Health check - Positive")
    void shouldReturnHealthStatus() throws Exception {
        // Arrange
        Map<String, Object> authHealth = Map.of("status", "OK");
        HealthCheckResponse healthResponse = HealthCheckResponse.success("correlation-id", authHealth);
        
        when(authKafkaClient.healthCheck("device-service"))
            .thenReturn(CompletableFuture.completedFuture(healthResponse));

        // Act
        Map<String, Object> result = deviceService.getHealthStatus();

        // Assert
        assertThat(result).isNotNull();
        assertThat(result.get("status")).isEqualTo("OK");
        assertThat(result.get("service")).isEqualTo("device-service");
        assertThat(result.get("auth-service")).isEqualTo(authHealth);
        verify(authKafkaClient).healthCheck("device-service");
    }

    @Test
    @DisplayName("Health check - Negative: Auth service timeout")
    void shouldHandleAuthServiceTimeoutInHealthCheck() throws Exception {
        // Arrange
        CompletableFuture<HealthCheckResponse> timeoutFuture = new CompletableFuture<>();
        timeoutFuture.completeExceptionally(new java.util.concurrent.TimeoutException("Timeout"));
        
        when(authKafkaClient.healthCheck("device-service"))
            .thenReturn(timeoutFuture);

        // Act
        Map<String, Object> result = deviceService.getHealthStatus();

        // Assert
        assertThat(result).isNotNull();
        assertThat(result.get("status")).isEqualTo("DEGRADED");
        assertThat(result.get("auth-service")).isEqualTo("UNAVAILABLE");
        verify(authKafkaClient).healthCheck("device-service");
    }

    @Test
    @DisplayName("Health check - Negative: Auth service error")
    void shouldHandleAuthServiceErrorInHealthCheck() throws Exception {
        // Arrange
        HealthCheckResponse errorResponse = HealthCheckResponse.error("correlation-id", "Service unavailable");
        
        when(authKafkaClient.healthCheck("device-service"))
            .thenReturn(CompletableFuture.completedFuture(errorResponse));

        // Act
        Map<String, Object> result = deviceService.getHealthStatus();

        // Assert
        assertThat(result).isNotNull();
        assertThat(result.get("status")).isEqualTo("OK");
        assertThat(result.get("auth-service")).isEqualTo("UNAVAILABLE");
        verify(authKafkaClient).healthCheck("device-service");
    }
}