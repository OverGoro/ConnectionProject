plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'io.qameta.allure' version '2.11.2'
}

group = 'com.service'
version = '0.0.1-SNAPSHOT'
description = 'Authorisation service'

import java.nio.file.Paths
def service_name = 'auth-service'
def k8sDir = Paths.get(System.getProperty('user.home'), "GitHub", "ConnectionProject", "kubernetes", "auth-service").toString()

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	mavenLocal()
}

dependencies {
	
	implementation 'org.springframework.boot:spring-boot-starter'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'org.springframework.data:spring-data-commons'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation'org.springframework.boot:spring-boot-starter-web'


	implementation 'com.atomikos:transactions-spring-boot3-starter:6.0.0'
	
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'


	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

	
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	compileOnly 'org.projectlombok:lombok:1.18.38'
	annotationProcessor 'org.projectlombok:lombok:1.18.38'
	

	implementation 'com.connection:client-shared:1.0.0'
	compileOnly 'com.connection:client-shared:1.0.0'

	implementation 'com.connection:token-shared:1.0.0'
	compileOnly 'com.connection:token-shared:1.0.0'

	// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:2.29.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}

compileJava {
    options.compilerArgs += ['-parameters']
}

compileTestJava {
    options.compilerArgs += ['-parameters']
}
tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    systemProperty 'allure.results.directory', 'build/allure-results'
    
    // –î–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    systemProperty 'offline.mode', 'false'
    
    // –í–ê–ñ–ù–û: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç—á–µ—Ç–∞
    finalizedBy 'allureReport'
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
task offlineTest(type: Test) {
    useJUnitPlatform()
    systemProperty 'offline.mode', 'true'
    finalizedBy 'allureReport'
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Allure –æ—Ç—á–µ—Ç–∞
tasks.allureReport {
    dependsOn test // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    
    // –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
    doFirst {
        println "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Allure –æ—Ç—á–µ—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏..."
    }
}

task copyJarToK8s(type: Copy) {
    dependsOn bootJar
    
    doFirst {
        file(k8sDir).mkdirs()
        println "üìÅ –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $k8sDir"
        println "üì¶ –ò—Å—Ö–æ–¥–Ω—ã–π JAR: ${bootJar.archiveFile.get()}"
    }
    
    from bootJar.archiveFile.get()
    into k8sDir
    
    rename { String fileName ->
        "${service_name}.jar"
    }
    
    doLast {
        println "JAR —Ñ–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤: $k8sDir"
        println "–§–∞–π–ª: ${service_name}.jar"
        
        def targetFile = file("$k8sDir/${service_name}.jar")
        if (targetFile.exists()) {
            println "–†–∞–∑–º–µ—Ä —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${targetFile.length()} bytes"
        } else {
            println "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!"
        }
    }
}

bootJar.finalizedBy copyJarToK8s
