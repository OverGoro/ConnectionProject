plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.service'
version = '0.0.1-SNAPSHOT'
description = 'Authorisation service'

import java.nio.file.Paths
def service_name = 'auth-service'
def k8sDir = Paths.get(System.getProperty('user.home'), "GitHub", "ConnectionProject", "kubernetes", "auth-service").toString()

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	mavenLocal()
}

dependencies {
	
	implementation 'org.springframework.boot:spring-boot-starter'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'org.springframework.data:spring-data-commons'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation'org.springframework.boot:spring-boot-starter-web'


	implementation 'com.atomikos:transactions-spring-boot3-starter:6.0.0'
	
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'


	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

	
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	compileOnly 'org.projectlombok:lombok:1.18.38'
	annotationProcessor 'org.projectlombok:lombok:1.18.38'
	

	implementation 'com.connection:client-shared:1.0.0'
	compileOnly 'com.connection:client-shared:1.0.0'

	implementation 'com.connection:token-shared:1.0.0'
	compileOnly 'com.connection:token-shared:1.0.0'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}

compileJava {
    options.compilerArgs += ['-parameters']
}

compileTestJava {
    options.compilerArgs += ['-parameters']
}

tasks.named('test') {
	useJUnitPlatform()
}

task copyJarToK8s(type: Copy) {
    dependsOn bootJar
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    doFirst {
        file(k8sDir).mkdirs()
        println "üìÅ –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $k8sDir"
        println "üì¶ –ò—Å—Ö–æ–¥–Ω—ã–π JAR: ${bootJar.archiveFile.get()}"
    }
    
    from bootJar.archiveFile.get()
    into k8sDir
    
    rename { String fileName ->
        "${service_name}.jar"
    }
    
    doLast {
        println "JAR —Ñ–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤: $k8sDir"
        println "–§–∞–π–ª: ${service_name}.jar"
        
        def targetFile = file("$k8sDir/${service_name}.jar")
        if (targetFile.exists()) {
            println "–†–∞–∑–º–µ—Ä —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${targetFile.length()} bytes"
        } else {
            println "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!"
        }
    }
}


bootJar.finalizedBy copyJarToK8s