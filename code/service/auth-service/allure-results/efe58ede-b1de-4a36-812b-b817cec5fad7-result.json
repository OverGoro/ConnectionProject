{"uuid":"efe58ede-b1de-4a36-812b-b817cec5fad7","historyId":"705d5c713ea4f754400e615f53f9cc81","testCaseId":"[engine:junit-jupiter]/[class:com.service.auth.AuthServiceImplLondonTest]/[method:shouldRefreshTokensWhenValidRefreshToken()]","testCaseName":"Refresh tokens - Positive","fullName":"com.service.auth.AuthServiceImplLondonTest.shouldRefreshTokensWhenValidRefreshToken","labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.service.auth.AuthServiceImplLondonTest]/[method:shouldRefreshTokensWhenValidRefreshToken()]"},{"name":"host","value":"Yurik"},{"name":"thread","value":"3236063@Yurik.main(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.service.auth.AuthServiceImplLondonTest"},{"name":"testClass","value":"com.service.auth.AuthServiceImplLondonTest"},{"name":"testMethod","value":"shouldRefreshTokensWhenValidRefreshToken"},{"name":"suite","value":"Auth Service Implementation Tests - London Style"}],"links":[],"name":"Refresh tokens - Positive","status":"broken","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"\nStrict stubbing argument mismatch. Please check:\n - this invocation of 'toDALM' method:\n    refreshTokenConverter.toDALM(\n    com.connection.token.model.RefreshTokenBLM@3e48d38\n);\n    -> at com.service.auth.AuthServiceImpl.refresh(AuthServiceImpl.java:143)\n - has following stubbing(s) with different arguments:\n    1. refreshTokenConverter.toDALM(\n    com.connection.token.model.RefreshTokenBLM@6aba5d30\n);\n      -> at com.service.auth.AuthServiceImplLondonTest.shouldRefreshTokensWhenValidRefreshToken(AuthServiceImplLondonTest.java:190)\nTypically, stubbing argument mismatch indicates user mistake when writing tests.\nMockito fails early so that you can debug potential problem easily.\nHowever, there are legit scenarios when this exception generates false negative signal:\n  - stubbing the same method multiple times using 'given().will()' or 'when().then()' API\n    Please use 'will().given()' or 'doReturn().when()' API for stubbing.\n  - stubbed method is intentionally invoked with different arguments by code under test\n    Please use default or 'silent' JUnit Rule (equivalent of Strictness.LENIENT).\nFor more information see javadoc for PotentialStubbingProblem class.","trace":"org.mockito.exceptions.misusing.PotentialStubbingProblem: \nStrict stubbing argument mismatch. Please check:\n - this invocation of 'toDALM' method:\n    refreshTokenConverter.toDALM(\n    com.connection.token.model.RefreshTokenBLM@3e48d38\n);\n    -> at com.service.auth.AuthServiceImpl.refresh(AuthServiceImpl.java:143)\n - has following stubbing(s) with different arguments:\n    1. refreshTokenConverter.toDALM(\n    com.connection.token.model.RefreshTokenBLM@6aba5d30\n);\n      -> at com.service.auth.AuthServiceImplLondonTest.shouldRefreshTokensWhenValidRefreshToken(AuthServiceImplLondonTest.java:190)\nTypically, stubbing argument mismatch indicates user mistake when writing tests.\nMockito fails early so that you can debug potential problem easily.\nHowever, there are legit scenarios when this exception generates false negative signal:\n  - stubbing the same method multiple times using 'given().will()' or 'when().then()' API\n    Please use 'will().given()' or 'doReturn().when()' API for stubbing.\n  - stubbed method is intentionally invoked with different arguments by code under test\n    Please use default or 'silent' JUnit Rule (equivalent of Strictness.LENIENT).\nFor more information see javadoc for PotentialStubbingProblem class.\n\tat com.connection.token.converter.RefreshTokenConverter.toDALM(RefreshTokenConverter.java:41)\n\tat com.service.auth.AuthServiceImpl.refresh(AuthServiceImpl.java:143)\n\tat com.service.auth.AuthServiceImplLondonTest.shouldRefreshTokensWhenValidRefreshToken(AuthServiceImplLondonTest.java:193)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n"},"stage":"finished","description":"","steps":[],"attachments":[],"parameters":[],"start":1758331793950,"stop":1758331795110}