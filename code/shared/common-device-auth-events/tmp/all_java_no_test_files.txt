package com.connection.device.auth.events.domain;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.experimental.SuperBuilder;

import java.util.UUID;

import com.connection.common.events.BaseEvent;
import com.connection.device.auth.events.DeviceAuthEventConstants;

@Data
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class TokenValidatedEvent extends BaseEvent {
    private UUID deviceUid;
    private boolean isValid;
    private String tokenType;
    
    public TokenValidatedEvent(UUID deviceUid, boolean isValid, String tokenType) {
        super(DeviceAuthEventConstants.EVENT_DEVICE_TOKEN_VALIDATED, "device-auth-service");
        this.deviceUid = deviceUid;
        this.isValid = isValid;
        this.tokenType = tokenType;
    }
}package com.connection.device.auth.events.domain;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.experimental.SuperBuilder;

import java.util.UUID;

import com.connection.common.events.BaseEvent;
import com.connection.device.auth.events.DeviceAuthEventConstants;

@Data
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class DeviceTokenCreatedEvent extends BaseEvent {
    private UUID deviceUid;
    private String email;
    private String username;
    
    public DeviceTokenCreatedEvent(UUID deviceUid, String email, String username) {
        super(DeviceAuthEventConstants.EVENT_DEVICE_TOKEN_CREATED, "device-auth-service");
        this.deviceUid = deviceUid;
        this.email = email;
        this.username = username;
    }
}package com.connection.device.auth.events.commands;

import com.connection.common.events.Command;
import com.connection.device.auth.events.DeviceAuthEventConstants;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.experimental.SuperBuilder;

@Data
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class HealthCheckCommand extends Command {
    
    public HealthCheckCommand() {
        super(DeviceAuthEventConstants.COMMAND_HEALTH_CHECK, "unknown", DeviceAuthEventConstants.DEVICE_AUTH_RESPONSES_TOPIC);
    }
    
    public HealthCheckCommand(String sourceService) {
        super(DeviceAuthEventConstants.COMMAND_HEALTH_CHECK, sourceService, DeviceAuthEventConstants.DEVICE_AUTH_RESPONSES_TOPIC);
    }
}package com.connection.device.auth.events.commands;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.experimental.SuperBuilder;

import com.connection.common.events.Command;
import com.connection.device.auth.events.DeviceAuthEventConstants;

@Data
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class ValidateTokenCommand extends Command {
    private final String token;
    private final TokenType tokenType;
    
    public ValidateTokenCommand() {
        super(DeviceAuthEventConstants.COMMAND_VALIDATE_TOKEN, "unknown", DeviceAuthEventConstants.DEVICE_AUTH_RESPONSES_TOPIC);
        this.token = "unknown";
        this.tokenType = TokenType.UNKNOWN;
    }
    
    public ValidateTokenCommand(String token, String sourceService) {
        super(DeviceAuthEventConstants.COMMAND_VALIDATE_TOKEN, sourceService, DeviceAuthEventConstants.DEVICE_AUTH_RESPONSES_TOPIC);
        this.token = token;
        this.tokenType = TokenType.ACCESS;
    }
    
    public ValidateTokenCommand(String token, TokenType tokenType, String sourceService) {
        super(DeviceAuthEventConstants.COMMAND_VALIDATE_TOKEN, sourceService, DeviceAuthEventConstants.DEVICE_AUTH_RESPONSES_TOPIC);
        this.token = token;
        this.tokenType = tokenType;
    }
    
    public enum TokenType {
        ACCESS, REFRESH, UNKNOWN
    }
}package com.connection.device.auth.events.commands;

import com.connection.common.events.Command;
import com.connection.device.auth.events.DeviceAuthEventConstants;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.experimental.SuperBuilder;

@Data
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class ExtractDeviceUidCommand extends Command {
    private String token;
    private TokenType tokenType;
    
    public ExtractDeviceUidCommand() {
        super(DeviceAuthEventConstants.COMMAND_EXTRACT_DEVICE_UID, "unknown", DeviceAuthEventConstants.DEVICE_AUTH_RESPONSES_TOPIC);
        this.token = "unknown";
        this.tokenType = TokenType.UNKNOWN;
    }
    
    public ExtractDeviceUidCommand(String token, String sourceService) {
        super(DeviceAuthEventConstants.COMMAND_EXTRACT_DEVICE_UID, sourceService, DeviceAuthEventConstants.DEVICE_AUTH_RESPONSES_TOPIC);
        this.token = token;
        this.tokenType = TokenType.ACCESS;
    }
    
    public ExtractDeviceUidCommand(String token, TokenType tokenType, String sourceService) {
        super(DeviceAuthEventConstants.COMMAND_EXTRACT_DEVICE_UID, sourceService, DeviceAuthEventConstants.DEVICE_AUTH_RESPONSES_TOPIC);
        this.token = token;
        this.tokenType = tokenType;
    }
    
    public enum TokenType {
        ACCESS, REFRESH, UNKNOWN
    }
}package com.connection.device.auth.events.exceptions;

public class TokenValidationException extends AuthEventException {
    
    public TokenValidationException(String message) {
        super(message);
    }
    
    public TokenValidationException(String message, Throwable cause) {
        super(message, cause);
    }
}package com.connection.device.auth.events.exceptions;

public class AuthEventException extends RuntimeException {
    
    public AuthEventException(String message) {
        super(message);
    }
    
    public AuthEventException(String message, Throwable cause) {
        super(message, cause);
    }
}package com.connection.device.auth.events.responses;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

import java.util.UUID;

import com.connection.common.events.CommandResponse;

@Data
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(callSuper = true)
public class DeviceUidResponse extends CommandResponse {
    private UUID deviceUid;
    private String tokenType;
    
    public static DeviceUidResponse success(String correlationId, UUID deviceUid, String tokenType) {
        return DeviceUidResponse.builder()
                .eventId(UUID.randomUUID().toString())
                .correlationId(correlationId)
                .success(true)
                .deviceUid(deviceUid)
                .tokenType(tokenType)
                .timestamp(java.time.Instant.now())
                .build();
    }
    
    public static DeviceUidResponse error(String correlationId, String error) {
        return DeviceUidResponse.builder()
                .eventId(UUID.randomUUID().toString())
                .correlationId(correlationId)
                .success(false)
                .error(error)
                .timestamp(java.time.Instant.now())
                .build();
    }
}package com.connection.device.auth.events.responses;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

import java.util.Map;
import java.util.UUID;

import com.connection.common.events.CommandResponse;

@Data
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(callSuper = true)
public class HealthCheckResponse extends CommandResponse {
    private Map<String, Object> healthStatus;
    
    public static HealthCheckResponse success(String correlationId, Map<String, Object> healthStatus) {
        return HealthCheckResponse.builder()
                .eventId(UUID.randomUUID().toString())
                .correlationId(correlationId)
                .success(true)
                .healthStatus(healthStatus)
                .timestamp(java.time.Instant.now())
                .build();
    }
    
    public static HealthCheckResponse error(String correlationId, String error) {
        return HealthCheckResponse.builder()
                .eventId(UUID.randomUUID().toString())
                .correlationId(correlationId)
                .success(false)
                .error(error)
                .timestamp(java.time.Instant.now())
                .build();
    }
}package com.connection.device.auth.events.responses;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

import java.util.UUID;

import com.connection.common.events.CommandResponse;

@Data
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(callSuper = true)
public class TokenValidationResponse extends CommandResponse {
    private boolean isValid;
    private UUID deviceUid;
    private String tokenType;
    private String errorDetails;
    
    public static TokenValidationResponse valid(String correlationId, UUID deviceUid, String tokenType) {
        return TokenValidationResponse.builder()
                .eventId(UUID.randomUUID().toString())
                .correlationId(correlationId)
                .success(true)
                .isValid(true)
                .deviceUid(deviceUid)
                .tokenType(tokenType)
                .timestamp(java.time.Instant.now())
                .build();
    }
    
    public static TokenValidationResponse invalid(String correlationId, String error, String tokenType) {
        return TokenValidationResponse.builder()
                .eventId(UUID.randomUUID().toString())
                .correlationId(correlationId)
                .success(true)
                .isValid(false)
                .tokenType(tokenType)
                .errorDetails(error)
                .timestamp(java.time.Instant.now())
                .build();
    }
    
    public static TokenValidationResponse error(String correlationId, String error) {
        return TokenValidationResponse.builder()
                .eventId(UUID.randomUUID().toString())
                .correlationId(correlationId)
                .success(false)
                .isValid(false)
                .error(error)
                .timestamp(java.time.Instant.now())
                .build();
    }
}package com.connection.device.auth.events;

public class DeviceAuthEventConstants {
    
    // Kafka Topics
    public static final String DEVICE_AUTH_COMMANDS_TOPIC = "device.auth.commands";
    public static final String DEVICE_AUTH_RESPONSES_TOPIC = "device.auth.responses";
    public static final String DEVICE_AUTH_EVENTS_TOPIC = "device.auth.events";
    public static final String DEVICE_TOKEN_EVENTS_TOPIC = "device.token.events";
    
    // Command Types
    public static final String COMMAND_VALIDATE_TOKEN = "VALIDATE_TOKEN";
    public static final String COMMAND_EXTRACT_DEVICE_UID = "EXTRACT_DEVICE_UID";
    public static final String COMMAND_HEALTH_CHECK = "HEALTH_CHECK";
    
    // Event Types
    public static final String EVENT_DEVICE_TOKEN_CREATED = "DEVICE_TOKEN_CREATED";
    public static final String EVENT_DEVICE_TOKEN_VALIDATED = "TOKEN_VALIDATED";
    
    // Token Types
    public static final String TOKEN_TYPE_ACCESS = "ACCESS";
    public static final String TOKEN_TYPE_DEVICE = "DEVICE";
    
    private DeviceAuthEventConstants() {
        // utility class
    }
}package com.connection.device.auth.events;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import lombok.experimental.UtilityClass;

@UtilityClass
public class DeviceAuthEventUtils {
    private static final ObjectMapper objectMapper = new ObjectMapper()
            .registerModule(new JavaTimeModule());
    
    public static String toJson(Object event) {
        try {
            return objectMapper.writeValueAsString(event);
        } catch (JsonProcessingException e) {
            throw new RuntimeException("Failed to serialize auth event", e);
        }
    }
    
    public static <T> T fromJson(String json, Class<T> clazz) {
        try {
            return objectMapper.readValue(json, clazz);
        } catch (JsonProcessingException e) {
            throw new RuntimeException("Failed to deserialize auth event", e);
        }
    }
    
    public static String generateCorrelationId() {
        return java.util.UUID.randomUUID().toString();
    }
}