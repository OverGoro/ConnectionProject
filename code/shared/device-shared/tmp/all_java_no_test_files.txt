// DeviceValidateException.java
package com.connection.device.exception;

public class DeviceValidateException extends BaseDeviceException {
    String descriptionString;

    public DeviceValidateException(String deviceUid, String description) {
        super(deviceUid);
        this.descriptionString = description;
    }

    public String toString() {
        String res = super.toString();
        res += "\n" + "description: device is invalid";
        res += "\n" + descriptionString;
        return res;
    }
}// BaseDeviceException.java
package com.connection.device.exception;

public class BaseDeviceException extends RuntimeException {
    private final String deviceUid;

    public BaseDeviceException(String deviceUid) {
        super("device");
        this.deviceUid = deviceUid;
    }

    public String toString() {
        String res = super.toString();
        res += "\n" + "device: " + deviceUid;
        return res;
    }
}// DeviceNotFoundException.java
package com.connection.device.exception;

public class DeviceNotFoundException extends BaseDeviceException {
    public DeviceNotFoundException(String deviceUid) {
        super(deviceUid);
    }

    public String toString() {
        String res = super.toString();
        res += "\n" + "description: device not found";
        return res;
    }
}package com.connection.device.exception;

public class DeviceAddException extends BaseDeviceException{
    public DeviceAddException(String deviceString){
        super(deviceString);
    }

    public String toString(){
        String res = super.toString();
        res += "\n" + "description: cannot add device";
        return res;
    }
}
// DeviceAlreadyExistsException.java
package com.connection.device.exception;

public class DeviceAlreadyExistsException extends BaseDeviceException {
    public DeviceAlreadyExistsException(String deviceUid) {
        super(deviceUid);
    }

    public String toString() {
        String res = super.toString();
        res += "\n" + "description: device already exists";
        return res;
    }
}// DeviceBLM.java
package com.connection.device.model;

import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Builder
@EqualsAndHashCode
public class DeviceBLM {

    protected UUID uid;

    protected UUID clientUuid;

    protected String deviceName;

    protected String deviceDescription;
}// DeviceDTO.java
package com.connection.device.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Builder
@EqualsAndHashCode
public class DeviceDTO {
    
    protected String uid;
    
    protected String clientUuid;
    
    protected String deviceName;
    
    protected String deviceDescription;
}// DeviceDALM.java
package com.connection.device.model;

import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Builder
@EqualsAndHashCode
public class DeviceDALM {
    
    protected UUID uid;
    
    protected UUID clientUuid;
    
    protected String deviceName;
    
    protected String deviceDescription;
}// DeviceConverter.java
package com.connection.device.converter;

import java.util.UUID;

import com.connection.device.model.DeviceBLM;
import com.connection.device.model.DeviceDALM;
import com.connection.device.model.DeviceDTO;

public class DeviceConverter {
    public DeviceBLM toBLM(DeviceDALM dalm) {
        return new DeviceBLM(
            dalm.getUid(),
            dalm.getClientUuid(),
            dalm.getDeviceName(),
            dalm.getDeviceDescription()
        );
    }

    public DeviceBLM toBLM(DeviceDTO dto) {
        return new DeviceBLM(
            UUID.fromString(dto.getUid()),
            UUID.fromString(dto.getClientUuid()),
            dto.getDeviceName(),
            dto.getDeviceDescription()
        );
    }

    public DeviceDTO toDTO(DeviceBLM blm) {
        return new DeviceDTO(
            blm.getUid().toString(),
            blm.getClientUuid().toString(),
            blm.getDeviceName(),
            blm.getDeviceDescription()
        );
    }

    public DeviceDALM toDALM(DeviceBLM blm) {
        return new DeviceDALM(
            blm.getUid(),
            blm.getClientUuid(),
            blm.getDeviceName(),
            blm.getDeviceDescription()
        );
    }
}// DeviceValidator.java
package com.connection.device.validator;

import java.util.UUID;

import com.connection.device.exception.DeviceValidateException;
import com.connection.device.model.DeviceBLM;
import com.connection.device.model.DeviceDALM;
import com.connection.device.model.DeviceDTO;

public class DeviceValidator {
    public void validate(DeviceDTO device) {
        if (device == null) {
            throw new DeviceValidateException("null", "Device is null");
        }
        try {
            validateUid(device.getUid());
            validateClientUuid(device.getClientUuid());
            validateDeviceName(device.getDeviceName());
            validateDeviceDescription(device.getDeviceDescription());
        } catch (IllegalArgumentException e) {
            throw new DeviceValidateException(device.getUid(), e.getMessage());
        }
    }

    public void validate(DeviceBLM device) {
        if (device == null) {
            throw new DeviceValidateException("null", "Device is null");
        }
        try {
            validateUid(device.getUid());
            validateClientUuid(device.getClientUuid());
            validateDeviceName(device.getDeviceName());
            validateDeviceDescription(device.getDeviceDescription());
        } catch (IllegalArgumentException e) {
            throw new DeviceValidateException(device.getUid() != null ? device.getUid().toString() : "null", e.getMessage());
        }
    }

    public void validate(DeviceDALM device) {
        if (device == null) {
            throw new DeviceValidateException("null", "Device is null");
        }
        try {
            validateUid(device.getUid());
            validateClientUuid(device.getClientUuid());
            validateDeviceName(device.getDeviceName());
            validateDeviceDescription(device.getDeviceDescription());
        } catch (IllegalArgumentException e) {
            throw new DeviceValidateException(device.getUid() != null ? device.getUid().toString() : "null", e.getMessage());
        }
    }

    private void validateUid(UUID uid) {
        if (uid == null) {
            throw new IllegalArgumentException("UID cannot be null");
        }
    }

    private void validateUid(String uid) {
        if (uid == null || uid.trim().isEmpty()) {
            throw new IllegalArgumentException("UID cannot be empty");
        }
        try {
            UUID.fromString(uid);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid UID format");
        }
    }

    private void validateClientUuid(UUID clientUuid) {
        if (clientUuid == null) {
            throw new IllegalArgumentException("Client UUID cannot be null");
        }
    }

    private void validateClientUuid(String clientUuid) {
        if (clientUuid == null || clientUuid.trim().isEmpty()) {
            throw new IllegalArgumentException("Client UUID cannot be empty");
        }
        try {
            UUID.fromString(clientUuid);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid Client UUID format");
        }
    }

    private void validateDeviceName(String deviceName) {
        if (deviceName == null || deviceName.trim().isEmpty()) {
            throw new IllegalArgumentException("Device name cannot be empty");
        }
        if (deviceName.length() > 100) {
            throw new IllegalArgumentException("Device name cannot exceed 100 characters");
        }
    }

    private void validateDeviceDescription(String deviceDescription) {
        if (deviceDescription == null || deviceDescription.trim().isEmpty()) {
            throw new IllegalArgumentException("Device description cannot be empty");
        }
        if (deviceDescription.length() > 500) {
            throw new IllegalArgumentException("Device description cannot exceed 500 characters");
        }
    }
}package com.connection.device.repository;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.UUID;

import com.connection.device.converter.DeviceConverter;
import com.connection.device.exception.DeviceAlreadyExistsException;
import com.connection.device.exception.DeviceNotFoundException;
import com.connection.device.model.DeviceBLM;
import com.connection.device.model.DeviceDALM;
import com.connection.device.validator.DeviceValidator;

public class DeviceRepositorySQLImpl implements DeviceRepository {

    private static final String SELECT_DEVICE = "SELECT uid, client_uuid, device_name, device_description";
    private static final String FROM_DEVICE = " FROM core.device";

    private static final String SELECT_DEVICE_BY_UID = SELECT_DEVICE + FROM_DEVICE + " WHERE uid = :uid";
    private static final String SELECT_DEVICES_BY_CLIENT = SELECT_DEVICE + FROM_DEVICE + " WHERE client_uuid = :client_uuid";
    private static final String SELECT_DEVICE_BY_CLIENT_AND_NAME = SELECT_DEVICE + FROM_DEVICE + " WHERE client_uuid = :client_uuid AND device_name = :device_name";

    private static final String INSERT_DEVICE = "INSERT INTO core.device (uid, client_uuid, device_name, device_description) " +
            "VALUES (:uid, :client_uuid, :device_name, :device_description)";

    private static final String UPDATE_DEVICE = "UPDATE core.device SET device_name = :device_name, device_description = :device_description " +
            "WHERE uid = :uid";

    private static final String DELETE_DEVICE = "DELETE FROM core.device WHERE uid = :uid";

    private final DeviceConverter converter = new DeviceConverter();
    private final DeviceValidator validator = new DeviceValidator();
    private final NamedParameterJdbcTemplate jdbcTemplate;

    private final RowMapper<DeviceDALM> deviceRowMapper = (rs, rowNum) -> {
        DeviceDALM device = new DeviceDALM();
        device.setUid(UUID.fromString(rs.getString("uid")));
        device.setClientUuid(UUID.fromString(rs.getString("client_uuid")));
        device.setDeviceName(rs.getString("device_name"));
        device.setDeviceDescription(rs.getString("device_description"));
        return device;
    };

    public DeviceRepositorySQLImpl(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    @Transactional
    public void add(DeviceBLM device) throws DeviceAlreadyExistsException {
        // Валидация BLM модели
        validator.validate(device);
        
        if (exists(device.getUid())) {
            throw new DeviceAlreadyExistsException("Device with UID " + device.getUid() + " already exists");
        }

        // Конвертация BLM в DALM
        DeviceDALM dalDevice = converter.toDALM(device);

        MapSqlParameterSource params = new MapSqlParameterSource();
        params.addValue("uid", dalDevice.getUid());
        params.addValue("client_uuid", dalDevice.getClientUuid());
        params.addValue("device_name", dalDevice.getDeviceName());
        params.addValue("device_description", dalDevice.getDeviceDescription());

        jdbcTemplate.update(INSERT_DEVICE, params);
    }

    @Override
    @Transactional
    public void update(DeviceBLM device) throws DeviceNotFoundException {
        // Валидация BLM модели
        validator.validate(device);
        
        if (!exists(device.getUid())) {
            throw new DeviceNotFoundException("Device with UID " + device.getUid() + " not found");
        }

        // Конвертация BLM в DALM
        DeviceDALM dalDevice = converter.toDALM(device);

        MapSqlParameterSource params = new MapSqlParameterSource();
        params.addValue("uid", dalDevice.getUid());
        params.addValue("device_name", dalDevice.getDeviceName());
        params.addValue("device_description", dalDevice.getDeviceDescription());

        jdbcTemplate.update(UPDATE_DEVICE, params);
    }

    @Override
    @Transactional
    public void delete(UUID uid) throws DeviceNotFoundException {
        if (!exists(uid)) {
            throw new DeviceNotFoundException("Device with UID " + uid + " not found");
        }

        MapSqlParameterSource params = new MapSqlParameterSource();
        params.addValue("uid", uid);

        jdbcTemplate.update(DELETE_DEVICE, params);
    }

    @Override
    @Transactional(readOnly = true)
    public DeviceBLM findByUid(UUID uid) throws DeviceNotFoundException {
        MapSqlParameterSource params = new MapSqlParameterSource();
        params.addValue("uid", uid);
        try {
            DeviceDALM dalDevice = jdbcTemplate.queryForObject(SELECT_DEVICE_BY_UID, params, deviceRowMapper);
            // Конвертация DALM в BLM
            return converter.toBLM(dalDevice);
        } catch (EmptyResultDataAccessException e) {
            throw new DeviceNotFoundException("Device with UID " + uid + " not found");
        }
    }

    @Override
    @Transactional(readOnly = true)
    public List<DeviceBLM> findByClientUuid(UUID clientUuid) {
        MapSqlParameterSource params = new MapSqlParameterSource();
        params.addValue("client_uuid", clientUuid);
        List<DeviceDALM> dalDevices = jdbcTemplate.query(SELECT_DEVICES_BY_CLIENT, params, deviceRowMapper);
        
        // Конвертация списка DALM в BLM
        return dalDevices.stream()
                .map(converter::toBLM)
                .toList();
    }

    @Override
    @Transactional(readOnly = true)
    public boolean exists(UUID uid) {
        MapSqlParameterSource params = new MapSqlParameterSource();
        params.addValue("uid", uid);
        try {
            jdbcTemplate.queryForObject(SELECT_DEVICE_BY_UID, params, deviceRowMapper);
            return true;
        } catch (EmptyResultDataAccessException e) {
            return false;
        }
    }

    @Override
    @Transactional(readOnly = true)
    public boolean existsByClientAndName(UUID clientUuid, String deviceName) {
        MapSqlParameterSource params = new MapSqlParameterSource();
        params.addValue("client_uuid", clientUuid);
        params.addValue("device_name", deviceName);
        try {
            jdbcTemplate.queryForObject(SELECT_DEVICE_BY_CLIENT_AND_NAME, params, deviceRowMapper);
            return true;
        } catch (EmptyResultDataAccessException e) {
            return false;
        }
    }
}package com.connection.device.repository;

import java.util.List;
import java.util.UUID;

import com.connection.device.exception.DeviceAlreadyExistsException;
import com.connection.device.exception.DeviceNotFoundException;
import com.connection.device.model.DeviceBLM;

public interface DeviceRepository {
    /**
     * Добавить новое устройство
     */
    void add(DeviceBLM device) throws DeviceAlreadyExistsException;

    /**
     * Обновить устройство
     */
    void update(DeviceBLM device) throws DeviceNotFoundException;

    /**
     * Удалить устройство
     */
    void delete(UUID uid) throws DeviceNotFoundException;

    /**
     * Найти устройство по UID
     */
    DeviceBLM findByUid(UUID uid) throws DeviceNotFoundException;

    /**
     * Найти все устройства клиента
     */
    List<DeviceBLM> findByClientUuid(UUID clientUuid);

    /**
     * Проверить существование устройства
     */
    boolean exists(UUID uid);

    /**
     * Проверить существование устройства по имени для клиента
     */
    boolean existsByClientAndName(UUID clientUuid, String deviceName);
}package com.connection.device.mother;

import java.util.UUID;

import com.connection.device.model.DeviceBLM;
import com.connection.device.model.DeviceDALM;
import com.connection.device.model.DeviceDTO;

public class DeviceObjectMother {

    private static final UUID DEFAULT_UID = UUID.fromString("123e4567-e89b-12d3-a456-426614174000");
    private static final UUID DEFAULT_CLIENT_UUID = UUID.fromString("123e4567-e89b-12d3-a456-426614174001");
    private static final String DEFAULT_NAME = "Test Device";
    private static final String DEFAULT_DESCRIPTION = "Test Device Description";

    // Valid devices
    public static DeviceDTO createValidDeviceDTO() {
        return DeviceDTO.builder()
                .uid(DEFAULT_UID.toString())
                .clientUuid(DEFAULT_CLIENT_UUID.toString())
                .deviceName(DEFAULT_NAME)
                .deviceDescription(DEFAULT_DESCRIPTION)
                .build();
    }

    public static DeviceBLM createValidDeviceBLM() {
        return DeviceBLM.builder()
                .uid(DEFAULT_UID)
                .clientUuid(DEFAULT_CLIENT_UUID)
                .deviceName(DEFAULT_NAME)
                .deviceDescription(DEFAULT_DESCRIPTION)
                .build();
    }

    public static DeviceDALM createValidDeviceDALM() {
        return DeviceDALM.builder()
                .uid(DEFAULT_UID)
                .clientUuid(DEFAULT_CLIENT_UUID)
                .deviceName(DEFAULT_NAME)
                .deviceDescription(DEFAULT_DESCRIPTION)
                .build();
    }

    // Invalid devices
    public static DeviceDTO createDeviceDTOWithNullUid() {
        return DeviceDTO.builder()
                .uid(null)
                .clientUuid(DEFAULT_CLIENT_UUID.toString())
                .deviceName(DEFAULT_NAME)
                .deviceDescription(DEFAULT_DESCRIPTION)
                .build();
    }

    public static DeviceDTO createDeviceDTOWithInvalidUid() {
        return DeviceDTO.builder()
                .uid("invalid-uuid")
                .clientUuid(DEFAULT_CLIENT_UUID.toString())
                .deviceName(DEFAULT_NAME)
                .deviceDescription(DEFAULT_DESCRIPTION)
                .build();
    }

    public static DeviceDTO createDeviceDTOWithLongName() {
        return DeviceDTO.builder()
                .uid(DEFAULT_UID.toString())
                .clientUuid(DEFAULT_CLIENT_UUID.toString())
                .deviceName("A".repeat(101)) // Exceeds 100 characters
                .deviceDescription(DEFAULT_DESCRIPTION)
                .build();
    }

    public static DeviceDTO createDeviceDTOWithLongDescription() {
        return DeviceDTO.builder()
                .uid(DEFAULT_UID.toString())
                .clientUuid(DEFAULT_CLIENT_UUID.toString())
                .deviceName(DEFAULT_NAME)
                .deviceDescription("A".repeat(501)) // Exceeds 500 characters
                .build();
    }

    public static DeviceBLM createDeviceBLMWithNullFields() {
        return DeviceBLM.builder()
                .uid(null)
                .clientUuid(null)
                .deviceName(null)
                .deviceDescription(null)
                .build();
    }

    // Devices for specific scenarios
    public static DeviceDALM createDeviceForClient(UUID clientUuid) {
        return DeviceDALM.builder()
                .uid(UUID.randomUUID())
                .clientUuid(clientUuid)
                .deviceName("Client Specific Device")
                .deviceDescription("Device for client " + clientUuid)
                .build();
    }

    public static DeviceDALM createDeviceWithName(UUID clientUuid, String name) {
        return DeviceDALM.builder()
                .uid(UUID.randomUUID())
                .clientUuid(clientUuid)
                .deviceName(name)
                .deviceDescription("Device with name " + name)
                .build();
    }
}