plugins {
    id 'base'
}


// Задача для запуска всех тестов во всех подпроектах
task testAll {
    group = 'verification'
    description = 'Runs tests in all subprojects'
    
    // Просто зависем от всех test задач
    dependsOn {
        subprojects.findAll { 
            it.tasks.findByName('test') != null 
        }.collect { 
            it.tasks.test 
        }
    }
}

// Задача для полной очистки всех подпроектов
task cleanAll {
    group = 'build'
    description = 'Cleans all subprojects including build directories'

    dependsOn {
        subprojects.findAll { 
            it.tasks.findByName('clean') != null 
        }.collect { 
            it.tasks.clean 
        }
    }
    
    doLast {
        // Дополнительно очищаем корневую папку build
        delete "${project.buildDir}"
        println "Cleaned all projects and root build directory"
    }
}

// Задача для агрегации результатов Allure из всех подпроектов
task aggregateAllureResults(type: Copy) {
    group = 'reporting'
    description = 'Aggregates Allure results from all subprojects'

    into "${buildDir}/allure-results"
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    // Копируем историю из предыдущих запусков
    from("${buildDir}/allure-report/history") {
        into 'history'
    }

    subprojects.each { project ->
        def allureResultsDir = "${project.buildDir}/allure-results"
        if (file(allureResultsDir).exists()) {
            from(allureResultsDir) {
                include '**/*'
            }
        }
    }

    dependsOn testAll
    
    doFirst {
        mkdir "${buildDir}/allure-results"
    }
}

task generateAllureReport(type: Exec) {
    group = 'reporting'
    description = 'Generates combined Allure report from all subprojects'

    def resultsDir = file("${buildDir}/allure-results")
    def reportDir = file("${buildDir}/allure-report")

    // Добавляем флаг для сохранения истории
    commandLine 'allure', 'generate', resultsDir, '-o', reportDir, '--clean', '--history-dir', "${reportDir}/history"

    dependsOn aggregateAllureResults

    doFirst {
        println "Generating combined Allure report with history"
    }
}

// Задача для запуска allure serve с сырыми результатами
task allureServe(type: Exec) {
    group = 'reporting'
    description = 'Starts Allure server with combined results from all subprojects'

    def resultsDir = file("${buildDir}/allure-results")

    commandLine 'allure', 'serve', resultsDir

    dependsOn aggregateAllureResults

    doFirst {
        println "Starting Allure server with results from all subprojects"
        println "Report will be available at http://localhost:port"
    }
}

// Задача для запуска allure serve с сгенерированным отчётом
task allureServeGenerated(type: Exec) {
    group = 'reporting'
    description = 'Starts Allure server with generated combined report'

    def reportDir = file("${buildDir}/allure-report")

    commandLine 'allure', 'serve', reportDir

    dependsOn generateAllureReport

    doFirst {
        println "Starting Allure server with generated combined report"
    }
}

// Задача для открытия отчёта в браузере (статический файл)
task openAllureReport(type: Exec) {
    group = 'reporting'
    description = 'Opens the combined Allure report in browser'

    def reportDir = "${buildDir}/allure-report/index.html"

    commandLine 'open', reportDir

    dependsOn generateAllureReport

    onlyIf {
        System.getProperty('os.name').toLowerCase().contains('mac')
    }
}

// Основные задачи
tasks.named('build') {
    dependsOn testAll
}

tasks.named('check') {
    dependsOn testAll
}
