plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'maven-publish'
    id 'com.dorongold.task-tree' version '2.1.1'
}

// ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–û–ï–ö–¢–ê ==========
allprojects {
    group = 'com.connection'
    version = '1.0.0'
    
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'maven-publish'
    
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }
    
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }
    
    repositories {
        mavenCentral()
        mavenLocal()
    }
    
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:3.5.5"
        }
    }
}

// ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø –ü–û–î–ü–†–û–ï–ö–¢–û–í ==========
subprojects {
    // –û–±—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.38'
        annotationProcessor 'org.projectlombok:lombok:1.18.38'
        
        testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
        testImplementation 'org.mockito:mockito-core:5.18.0'
        testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
        testImplementation 'org.assertj:assertj-core:3.27.3'
        testImplementation 'io.qameta.allure:allure-junit5:2.29.1'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }
    
    // –û–¢–ö–õ–Æ–ß–ê–ï–ú –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ü–†–ò –ü–£–ë–õ–ò–ö–ê–¶–ò–ò
    tasks.withType(AbstractPublishToMaven) {
        dependsOn.removeAll { it instanceof TaskProvider && it.name == 'test' }
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: –æ—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É assemble –∏ test
    tasks.named('assemble') {
        dependsOn.removeAll { it.name == 'test' }
    }
    
    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs += ['-parameters']
        options.encoding = 'UTF-8'
    }
    
    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
    }
    
}




// ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ALLURE –î–õ–Ø –í–°–ï–ì–û –ü–†–û–ï–ö–¢–ê ==========
ext {
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR = "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"  // –¢–µ–ø–µ—Ä—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–∂–¥—É —Å–±–æ—Ä–∫–∞–º–∏
}

allure {
    version = "2.29.0"
    adapter {
        frameworks {
            junit5 {
                enabled = true
            }
        }
    }
}

// ========== –ó–ê–î–ê–ß–ò –î–õ–Ø –í–°–ï–ì–û –ü–†–û–ï–ö–¢–ê ==========

// –°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
task buildAll {
    description = 'Build all modules'
    group = 'Build'
    dependsOn subprojects.build
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
task testAll {
    description = 'Run tests in all modules'
    group = 'Verification'
}

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
gradle.projectsEvaluated {
    subprojects { project ->
        def allTestsTask = project.tasks.findByName('allTests')
        if (allTestsTask) {
            testAll.dependsOn allTestsTask
            logger.lifecycle("‚úÖ Adding allTests dependency from: ${project.name}")
        } else {
            logger.lifecycle("‚ùå No allTests task found in: ${project.name}")
        }
    }
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
task cleanAll {
    description = 'Clean all modules'
    group = 'Build'
    dependsOn subprojects.clean
}

// –°–±–æ—Ä–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ Allure –∏–∑ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
task collectAllureResults {
    description = 'Collect Allure results from all modules'
    group = 'Reporting'
    
    doFirst {
        file(ALLURE_RESULTS_DIR).deleteDir()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –°–Ω–∞—á–∞–ª–∞ –∫–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞
        def previousHistoryDir = file("${ALLURE_HISTORY_DIR}")
        def resultsHistoryDir = file("${ALLURE_RESULTS_DIR}/history")
        
        if (previousHistoryDir.exists()) {
            logger.lifecycle("üìã Copying history from previous reports")
            copy {
                from previousHistoryDir
                into resultsHistoryDir
            }
        }
        
        // –ó–∞—Ç–µ–º –∫–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –≤—Å–µ—Ö –ø–æ–¥–ø—Ä–æ–µ–∫—Ç–æ–≤
        subprojects.each { subproject ->
            def subprojectResults = "${subproject.buildDir}/allure-results"
            def subprojectDir = file(subprojectResults)
            
            if (subprojectDir.exists()) {
                logger.lifecycle("üìÅ Copying results from: ${subproject.name}")
                copy {
                    from subprojectDir
                    into ALLURE_RESULTS_DIR
                    // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    exclude '*.tmp', '*.lock'
                    // –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å
                    duplicatesStrategy = 'exclude'
                }
            } else {
                logger.lifecycle("‚ö†Ô∏è No allure results found in: ${subproject.name}")
            }
        }
        
        logger.lifecycle("üìä Collected results from ${subprojects.count { file("${it.buildDir}/allure-results").exists() }} modules")
    }
}

task generateCombinedAllureReport(type: Exec) {
    description = 'Generate combined Allure report from all modules'
    group = 'Reporting'
    
    dependsOn collectAllureResults
    
    doFirst {
        logger.lifecycle("üìä Generating combined Allure report...")
        file(ALLURE_REPORT_DIR).mkdirs()
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Combined Allure report generated at: ${ALLURE_REPORT_DIR}")
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def reportHistoryDir = file("${ALLURE_REPORT_DIR}/history")
            if (reportHistoryDir.exists()) {
                copy {
                    from reportHistoryDir
                    into ALLURE_HISTORY_DIR
                }
                logger.lifecycle("üíæ History saved for next run")
            }
        }
    }
}

task serveCombinedAllureReport(type: Exec) {
    description = 'Serve combined Allure report'
    group = 'Reporting'
    
    dependsOn generateCombinedAllureReport
    
    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞ –±–µ–∑ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
task serveExistingAllureReport(type: Exec) {
    description = 'Serve existing Allure report'
    group = 'Reporting'
    
    commandLine 'allure', 'serve', "${ALLURE_REPORT_DIR}"
}

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ Allure
task cleanAllureHistory {
    description = 'Clean Allure history'
    group = 'Build'
    doFirst {
        file(ALLURE_HISTORY_DIR).deleteDir()
        logger.lifecycle("üßπ Cleaned Allure history")
    }
}

// –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–∫–ª—é—á–∞—è –∏—Å—Ç–æ—Ä–∏—é
task cleanAllWithHistory {
    description = 'Clean all modules and Allure history'
    group = 'Build'
    dependsOn cleanAll, cleanAllureHistory
}

// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö shared –º–æ–¥—É–ª–µ–π
// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö shared –º–æ–¥—É–ª–µ–π –ë–ï–ó —Ç–µ—Å—Ç–æ–≤
task publishAllShared {
    description = 'Publish all shared modules to local Maven without running tests'
    group = 'Publishing'
    
    dependsOn subprojects.findAll { 
        it.path.contains('shared') 
    }.collect { project ->
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ shared –º–æ–¥—É–ª—è —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç —Ç–µ—Å—Ç–æ–≤
        project.tasks.register("publishNoTests", Task) {
            dependsOn project.tasks.withType(AbstractPublishToMaven)
            doFirst {
                // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç—ã
                project.tasks.withType(Test).configureEach { enabled = false }
            }
        }
        project.tasks.named("publishNoTests")
    }
}

// ========== –ó–ê–î–ê–ß–ò –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ ==========
defaultTasks 'buildAll'