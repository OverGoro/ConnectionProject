plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'io.qameta.allure' version '2.11.2'
}

group = 'com.service.connectionscheme'
version = '0.0.1-SNAPSHOT'
description = 'connectionscheme managment service'

import java.nio.file.Paths
def service_name = 'connectionscheme-service'
def k8sDir = Paths.get(System.getProperty('user.home'), "GitHub", "ConnectionProject", "kubernetes", "connectionscheme-service").toString()


java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	mavenLocal()
}

dependencies {
	
	implementation 'org.springframework.boot:spring-boot-starter'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'org.springframework.data:spring-data-commons'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.3.0'
	implementation 'org.springframework.security:spring-security-config:6.5.3'
	implementation 'org.springframework.security:spring-security-web:6.5.3'
    implementation 'org.springframework.kafka:spring-kafka:3.3.10'


	implementation 'com.atomikos:transactions-spring-boot3-starter:6.0.0'
	
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

	
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	compileOnly 'org.projectlombok:lombok:1.18.38'
	annotationProcessor 'org.projectlombok:lombok:1.18.38'

	implementation 'com.connection:token-shared:1.0.0'
	compileOnly 'com.connection:token-shared:1.0.0'
	
	implementation 'com.connection:connection-scheme-shared:1.0.0'
	compileOnly 'com.connection:connection-scheme-shared:1.0.0'

    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:common-auth-events:1.0.0'    
    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:common-connection-scheme-events:1.0.0'

	// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:2.29.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}

compileJava {
    options.compilerArgs += ['-parameters']
}

compileTestJava {
    options.compilerArgs += ['-parameters']
}
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Allure
allure {
    version = '2.35.1'
    useJUnit5 {
        version = '2.29.1'
    }
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    systemProperty 'allure.results.directory', 'build/allure-results'
    
    // –î–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    systemProperty 'offline.mode', 'false'
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
task offlineTest(type: Test) {
    useJUnitPlatform()
    systemProperty 'offline.mode', 'true'
}


task copyJarToK8s(type: Copy) {
    dependsOn bootJar
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    doFirst {
        file(k8sDir).mkdirs()
        println "üìÅ –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $k8sDir"
        println "üì¶ –ò—Å—Ö–æ–¥–Ω—ã–π JAR: ${bootJar.archiveFile.get()}"
    }
    
    from bootJar.archiveFile.get()
    into k8sDir
    
    rename { String fileName ->
        "${service_name}.jar"
    }
    
    doLast {
        println "JAR —Ñ–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤: $k8sDir"
        println "–§–∞–π–ª: ${service_name}.jar"
        
        def targetFile = file("$k8sDir/${service_name}.jar")
        if (targetFile.exists()) {
            println "–†–∞–∑–º–µ—Ä —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${targetFile.length() / 1024 / 1024} MB"
        } else {
            println "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!"
        }
    }
}


bootJar.finalizedBy copyJarToK8splugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
}

// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-service'
    K8S_DIR = new File(System.getProperty('user.home') + "/GitHub/ConnectionProject/kubernetes/buffer-service").toString()
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}

group = 'com.service'
version = '0.0.1-SNAPSHOT'
description = 'Buffer Service'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}

// ========== ALLURE CONFIGURATION ==========
allure {
    version = "2.29.0"
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è JUnit 5
    adapter {
        allureJavaVersion = "2.29.0"
        aspectjWeaver = true
        frameworks {
            junit5 {
                enabled = true
                autoconfigure = true
                aspectjVersion = "1.9.22"
            }
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞
    report {
        reportDir = layout.buildDirectory.dir("reports/allure-report")
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

// ========== DEPENDENCIES ==========
dependencies {
	
	implementation 'org.springframework.boot:spring-boot-starter'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'org.springframework.data:spring-data-commons'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.3.0'
	implementation 'org.springframework.security:spring-security-config:6.5.3'
	implementation 'org.springframework.security:spring-security-web:6.5.3'
    implementation 'org.springframework.kafka:spring-kafka:3.3.10'


	implementation 'com.atomikos:transactions-spring-boot3-starter:6.0.0'
	
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

	
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	compileOnly 'org.projectlombok:lombok:1.18.38'
    testCompileOnly 'org.projectlombok:lombok:1.18.38'
	annotationProcessor 'org.projectlombok:lombok:1.18.38'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

	implementation 'com.connection:token-shared:1.0.0'
	compileOnly 'com.connection:token-shared:1.0.0'
	
	implementation 'com.connection:connection-scheme-shared:1.0.0'
	compileOnly 'com.connection:connection-scheme-shared:1.0.0'

    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:common-auth-events:1.0.0'    
    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:common-connection-scheme-events:1.0.0'

	// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:2.29.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}



// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    // dependsOn startTestContainers
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== DEPLOYMENT TASKS ==========
task copyJarToK8s(type: Copy) {
    description = 'Copy JAR to Kubernetes deployment directory'
    group = 'Deployment'
    
    dependsOn bootJar
    
    doFirst {
        file(K8S_DIR).mkdirs()
        logger.lifecycle("üìÅ Target directory: $K8S_DIR")
        logger.lifecycle("üì¶ Source JAR: ${bootJar.archiveFile.get()}")
    }
    
    from bootJar.archiveFile.get()
    into K8S_DIR
    rename { "${SERVICE_NAME}.jar" }
    
    doLast {
        def targetFile = file("$K8S_DIR/${SERVICE_NAME}.jar")
        if (targetFile.exists()) {
            logger.lifecycle("‚úÖ JAR copied: ${targetFile.length()} bytes")
        } else {
            throw new GradleException("‚ùå JAR file was not copied!")
        }
    }
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}

// ========== TASK DEPENDENCIES ==========
bootJar {
    finalizedBy copyJarToK8s
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
    if (it.name.contains('integration') || it.name.contains('e2e')) {
        // it.dependsOn startTestContainers
    }
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
}

// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'auth-service'
    K8S_DIR = new File(System.getProperty('user.home') + "/GitHub/ConnectionProject/kubernetes/auth-service").toString()
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}

group = 'com.service'
version = '0.0.1-SNAPSHOT'
description = 'Authorization Service'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}

// ========== ALLURE CONFIGURATION ==========
allure {
    version = "2.29.0"
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è JUnit 5
    adapter {
        allureJavaVersion = "2.29.0"
        aspectjWeaver = true
        frameworks {
            junit5 {
                enabled = true
                autoconfigure = true
                aspectjVersion = "1.9.22"
            }
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞
    report {
        reportDir = layout.buildDirectory.dir("reports/allure-report")
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

// ========== DEPENDENCIES ==========
dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.data:spring-data-commons'
    implementation 'org.springframework.kafka:spring-kafka:3.3.10'
    
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Database & Transactions
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'com.atomikos:transactions-spring-boot3-starter:6.0.0'

    // Security
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    // Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    testCompileOnly 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

    // Shared modules
    implementation 'com.connection:client-shared:1.0.0'
    implementation 'com.connection:token-shared:1.0.0'
    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:common-auth-events:1.0.0'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test:3.3.10'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    
    // Allure dependencies
    testImplementation 'io.qameta.allure:allure-junit5:2.29.1'
    testImplementation 'io.qameta.allure:allure-assertj:2.29.1'
    testImplementation 'io.qameta.allure:allure-rest-assured:2.29.1'
    testImplementation 'io.qameta.allure:allure-java-commons:2.29.1'
        
    // Additional test tools
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    dependsOn startTestContainers
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== DEPLOYMENT TASKS ==========
task copyJarToK8s(type: Copy) {
    description = 'Copy JAR to Kubernetes deployment directory'
    group = 'Deployment'
    
    dependsOn bootJar
    
    doFirst {
        file(K8S_DIR).mkdirs()
        logger.lifecycle("üìÅ Target directory: $K8S_DIR")
        logger.lifecycle("üì¶ Source JAR: ${bootJar.archiveFile.get()}")
    }
    
    from bootJar.archiveFile.get()
    into K8S_DIR
    rename { "${SERVICE_NAME}.jar" }
    
    doLast {
        def targetFile = file("$K8S_DIR/${SERVICE_NAME}.jar")
        if (targetFile.exists()) {
            logger.lifecycle("‚úÖ JAR copied: ${targetFile.length()} bytes")
        } else {
            throw new GradleException("‚ùå JAR file was not copied!")
        }
    }
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}

// ========== TASK DEPENDENCIES ==========
bootJar {
    finalizedBy copyJarToK8s
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers



// ========== DEFAULT TASKS ==========
defaultTasks 'build'plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
}

// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'auth-service'
    K8S_DIR = new File(System.getProperty('user.home') + "/GitHub/ConnectionProject/kubernetes/auth-service").toString()
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}

group = 'com.service'
version = '0.0.1-SNAPSHOT'
description = 'Authorization Service'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}

// ========== ALLURE CONFIGURATION ==========
allure {
    version = "2.29.0"
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è JUnit 5
    adapter {
        allureJavaVersion = "2.29.0"
        aspectjWeaver = true
        frameworks {
            junit5 {
                enabled = true
                autoconfigure = true
                aspectjVersion = "1.9.22"
            }
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞
    report {
        reportDir = layout.buildDirectory.dir("reports/allure-report")
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

// ========== DEPENDENCIES ==========
dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.data:spring-data-commons'
    implementation 'org.springframework.kafka:spring-kafka:3.3.10'
    
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Database & Transactions
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'com.atomikos:transactions-spring-boot3-starter:6.0.0'

    // Security
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    // Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    testCompileOnly 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

    // Shared modules
    implementation 'com.connection:client-shared:1.0.0'
    implementation 'com.connection:token-shared:1.0.0'
    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:common-auth-events:1.0.0'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test:3.3.10'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    
    // Allure dependencies
    testImplementation 'io.qameta.allure:allure-junit5:2.29.1'
    testImplementation 'io.qameta.allure:allure-assertj:2.29.1'
    testImplementation 'io.qameta.allure:allure-rest-assured:2.29.1'
    testImplementation 'io.qameta.allure:allure-java-commons:2.29.1'
        
    // Additional test tools
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== DEPLOYMENT TASKS ==========
task copyJarToK8s(type: Copy) {
    description = 'Copy JAR to Kubernetes deployment directory'
    group = 'Deployment'
    
    dependsOn bootJar
    
    doFirst {
        file(K8S_DIR).mkdirs()
        logger.lifecycle("üìÅ Target directory: $K8S_DIR")
        logger.lifecycle("üì¶ Source JAR: ${bootJar.archiveFile.get()}")
    }
    
    from bootJar.archiveFile.get()
    into K8S_DIR
    rename { "${SERVICE_NAME}.jar" }
    
    doLast {
        def targetFile = file("$K8S_DIR/${SERVICE_NAME}.jar")
        if (targetFile.exists()) {
            logger.lifecycle("‚úÖ JAR copied: ${targetFile.length()} bytes")
        } else {
            throw new GradleException("‚ùå JAR file was not copied!")
        }
    }
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}

// ========== TASK DEPENDENCIES ==========
bootJar {
    finalizedBy copyJarToK8s
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers



// ========== DEFAULT TASKS ==========
defaultTasks 'build'
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
}

// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-service'
    K8S_DIR = new File(System.getProperty('user.home') + "/GitHub/ConnectionProject/kubernetes/buffer-service").toString()
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}

group = 'com.service'
version = '0.0.1-SNAPSHOT'
description = 'Buffer Service'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}

// ========== ALLURE CONFIGURATION ==========
allure {
    version = "2.29.0"
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è JUnit 5
    adapter {
        allureJavaVersion = "2.29.0"
        aspectjWeaver = true
        frameworks {
            junit5 {
                enabled = true
                autoconfigure = true
                aspectjVersion = "1.9.22"
            }
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞
    report {
        reportDir = layout.buildDirectory.dir("reports/allure-report")
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

// ========== DEPENDENCIES ==========
dependencies {
    // Spring Boot
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.data:spring-data-commons'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.3.0'
    implementation 'org.springframework.security:spring-security-config:6.5.3'
    implementation 'org.springframework.security:spring-security-web:6.5.3'
    implementation 'org.springframework.kafka:spring-kafka:3.3.10'

    
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Database & Transactions
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'com.atomikos:transactions-spring-boot3-starter:6.0.0'

    // Security
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    // Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    testCompileOnly 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

    // Shared modules
    implementation 'com.connection:token-shared:1.0.0'
    implementation 'com.connection:connection-scheme-shared:1.0.0'
    implementation 'com.connection:buffer-shared:1.0.0'
    implementation 'com.connection:device-shared:1.0.0'

    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:common-auth-events:1.0.0'
    implementation 'com.connection:common-device-events:1.0.0'
    implementation 'com.connection:common-buffer-events:1.0.0'
    implementation 'com.connection:common-connection-scheme-events:1.0.0'


    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test:3.3.10'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    
    // Allure dependencies
    testImplementation 'io.qameta.allure:allure-junit5:2.29.1'
    testImplementation 'io.qameta.allure:allure-assertj:2.29.1'
    testImplementation 'io.qameta.allure:allure-rest-assured:2.29.1'
    testImplementation 'io.qameta.allure:allure-java-commons:2.29.1'
        
    // Additional test tools
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    // dependsOn startTestContainers
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== DEPLOYMENT TASKS ==========
task copyJarToK8s(type: Copy) {
    description = 'Copy JAR to Kubernetes deployment directory'
    group = 'Deployment'
    
    dependsOn bootJar
    
    doFirst {
        file(K8S_DIR).mkdirs()
        logger.lifecycle("üìÅ Target directory: $K8S_DIR")
        logger.lifecycle("üì¶ Source JAR: ${bootJar.archiveFile.get()}")
    }
    
    from bootJar.archiveFile.get()
    into K8S_DIR
    rename { "${SERVICE_NAME}.jar" }
    
    doLast {
        def targetFile = file("$K8S_DIR/${SERVICE_NAME}.jar")
        if (targetFile.exists()) {
            logger.lifecycle("‚úÖ JAR copied: ${targetFile.length()} bytes")
        } else {
            throw new GradleException("‚ùå JAR file was not copied!")
        }
    }
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}

// ========== TASK DEPENDENCIES ==========
bootJar {
    finalizedBy copyJarToK8s
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
    if (it.name.contains('integration') || it.name.contains('e2e')) {
        // it.dependsOn startTestContainers
    }
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
}

// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-service'
    K8S_DIR = new File(System.getProperty('user.home') + "/GitHub/ConnectionProject/kubernetes/buffer-service").toString()
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}

group = 'com.service'
version = '0.0.1-SNAPSHOT'
description = 'Buffer Service'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}

// ========== ALLURE CONFIGURATION ==========
allure {
    version = "2.29.0"
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è JUnit 5
    adapter {
        allureJavaVersion = "2.29.0"
        aspectjWeaver = true
        frameworks {
            junit5 {
                enabled = true
                autoconfigure = true
                aspectjVersion = "1.9.22"
            }
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞
    report {
        reportDir = layout.buildDirectory.dir("reports/allure-report")
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

// ========== DEPENDENCIES ==========
dependencies {
    // Spring Boot
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.data:spring-data-commons'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.3.0'
    implementation 'org.springframework.security:spring-security-config:6.5.3'
    implementation 'org.springframework.security:spring-security-web:6.5.3'
    implementation 'org.springframework.kafka:spring-kafka:3.3.10'

    
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Database & Transactions
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'com.atomikos:transactions-spring-boot3-starter:6.0.0'

    // Security
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    // Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    testCompileOnly 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

    // Shared modules
    implementation 'com.connection:token-shared:1.0.0'
    implementation 'com.connection:connection-scheme-shared:1.0.0'
    implementation 'com.connection:buffer-shared:1.0.0'
    implementation 'com.connection:device-shared:1.0.0'

    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:common-auth-events:1.0.0'
    implementation 'com.connection:common-device-events:1.0.0'
    implementation 'com.connection:common-buffer-events:1.0.0'
    implementation 'com.connection:common-connection-scheme-events:1.0.0'


    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test:3.3.10'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    
    // Allure dependencies
    testImplementation 'io.qameta.allure:allure-junit5:2.29.1'
    testImplementation 'io.qameta.allure:allure-assertj:2.29.1'
    testImplementation 'io.qameta.allure:allure-rest-assured:2.29.1'
    testImplementation 'io.qameta.allure:allure-java-commons:2.29.1'
        
    // Additional test tools
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    // dependsOn startTestContainers
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== DEPLOYMENT TASKS ==========
task copyJarToK8s(type: Copy) {
    description = 'Copy JAR to Kubernetes deployment directory'
    group = 'Deployment'
    
    dependsOn bootJar
    
    doFirst {
        file(K8S_DIR).mkdirs()
        logger.lifecycle("üìÅ Target directory: $K8S_DIR")
        logger.lifecycle("üì¶ Source JAR: ${bootJar.archiveFile.get()}")
    }
    
    from bootJar.archiveFile.get()
    into K8S_DIR
    rename { "${SERVICE_NAME}.jar" }
    
    doLast {
        def targetFile = file("$K8S_DIR/${SERVICE_NAME}.jar")
        if (targetFile.exists()) {
            logger.lifecycle("‚úÖ JAR copied: ${targetFile.length()} bytes")
        } else {
            throw new GradleException("‚ùå JAR file was not copied!")
        }
    }
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}

// ========== TASK DEPENDENCIES ==========
bootJar {
    finalizedBy copyJarToK8s
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
    if (it.name.contains('integration') || it.name.contains('e2e')) {
        // it.dependsOn startTestContainers
    }
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'



plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
}

// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-service'
    K8S_DIR = new File(System.getProperty('user.home') + "/GitHub/ConnectionProject/kubernetes/buffer-service").toString()
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}

group = 'com.service'
version = '0.0.1-SNAPSHOT'
description = 'Buffer Service'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}

// ========== ALLURE CONFIGURATION ==========
allure {
    version = "2.29.0"
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è JUnit 5
    adapter {
        allureJavaVersion = "2.29.0"
        aspectjWeaver = true
        frameworks {
            junit5 {
                enabled = true
                autoconfigure = true
                aspectjVersion = "1.9.22"
            }
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞
    report {
        reportDir = layout.buildDirectory.dir("reports/allure-report")
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

// ========== DEPENDENCIES ==========
dependencies {
	
	implementation 'org.springframework.boot:spring-boot-starter'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'org.springframework.data:spring-data-commons'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.3.0'
	implementation 'org.springframework.security:spring-security-config:6.5.3'
	implementation 'org.springframework.security:spring-security-web:6.5.3'
    implementation 'org.springframework.kafka:spring-kafka:3.3.10'



	implementation 'com.atomikos:transactions-spring-boot3-starter:6.0.0'
	
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'


	
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    compileOnly 'org.projectlombok:lombok:1.18.38'
	annotationProcessor 'org.projectlombok:lombok:1.18.38'
	testCompileOnly 'org.projectlombok:lombok:1.18.38'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

    implementation 'com.connection:buffer-shared:1.0.0'
	implementation 'com.connection:connection-scheme-shared:1.0.0'
    implementation 'com.connection:device-shared:1.0.0'
    implementation 'com.connection:device-token-shared:1.0.0'
    implementation 'com.connection:message-shared:1.0.0'
	implementation 'com.connection:token-shared:1.0.0'

    implementation 'com.connection:common-events:1.0.0'

    implementation 'com.connection:common-auth-events:1.0.0'
    implementation 'com.connection:common-buffer-events:1.0.0'
    implementation 'com.connection:common-connection-scheme-events:1.0.0'
    implementation 'com.connection:common-device-auth-events:1.0.0'
    implementation 'com.connection:common-device-events:1.0.0'
    implementation 'com.connection:common-message-events:1.0.0'

	// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:2.29.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    // dependsOn startTestContainers
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== DEPLOYMENT TASKS ==========
task copyJarToK8s(type: Copy) {
    description = 'Copy JAR to Kubernetes deployment directory'
    group = 'Deployment'
    
    dependsOn bootJar
    
    doFirst {
        file(K8S_DIR).mkdirs()
        logger.lifecycle("üìÅ Target directory: $K8S_DIR")
        logger.lifecycle("üì¶ Source JAR: ${bootJar.archiveFile.get()}")
    }
    
    from bootJar.archiveFile.get()
    into K8S_DIR
    rename { "${SERVICE_NAME}.jar" }
    
    doLast {
        def targetFile = file("$K8S_DIR/${SERVICE_NAME}.jar")
        if (targetFile.exists()) {
            logger.lifecycle("‚úÖ JAR copied: ${targetFile.length()} bytes")
        } else {
            throw new GradleException("‚ùå JAR file was not copied!")
        }
    }
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}

// ========== TASK DEPENDENCIES ==========
bootJar {
    finalizedBy copyJarToK8s
}

task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
    if (it.name.contains('integration') || it.name.contains('e2e')) {
        // it.dependsOn startTestContainers
    }
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'



plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
}

// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-service'
    K8S_DIR = new File(System.getProperty('user.home') + "/GitHub/ConnectionProject/kubernetes/buffer-service").toString()
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}

group = 'com.service'
version = '0.0.1-SNAPSHOT'
description = 'Buffer Service'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}

// ========== ALLURE CONFIGURATION ==========
allure {
    version = "2.29.0"
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è JUnit 5
    adapter {
        allureJavaVersion = "2.29.0"
        aspectjWeaver = true
        frameworks {
            junit5 {
                enabled = true
                autoconfigure = true
                aspectjVersion = "1.9.22"
            }
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞
    report {
        reportDir = layout.buildDirectory.dir("reports/allure-report")
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

// ========== DEPENDENCIES ==========
dependencies {
	
	implementation 'org.springframework.boot:spring-boot-starter'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'org.springframework.data:spring-data-commons'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.3.0'
	implementation 'org.springframework.security:spring-security-config:6.5.3'
	implementation 'org.springframework.security:spring-security-web:6.5.3'
    implementation 'org.springframework.kafka:spring-kafka:3.3.10'



	implementation 'com.atomikos:transactions-spring-boot3-starter:6.0.0'
	
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'


	
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    compileOnly 'org.projectlombok:lombok:1.18.38'
	annotationProcessor 'org.projectlombok:lombok:1.18.38'
	testCompileOnly 'org.projectlombok:lombok:1.18.38'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

    implementation 'com.connection:buffer-shared:1.0.0'
	implementation 'com.connection:connection-scheme-shared:1.0.0'
    implementation 'com.connection:device-shared:1.0.0'
    implementation 'com.connection:device-token-shared:1.0.0'
    implementation 'com.connection:message-shared:1.0.0'
	implementation 'com.connection:token-shared:1.0.0'

    implementation 'com.connection:common-events:1.0.0'

    implementation 'com.connection:common-auth-events:1.0.0'
    implementation 'com.connection:common-buffer-events:1.0.0'
    implementation 'com.connection:common-connection-scheme-events:1.0.0'
    implementation 'com.connection:common-device-auth-events:1.0.0'
    implementation 'com.connection:common-device-events:1.0.0'
    implementation 'com.connection:common-message-events:1.0.0'

	// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:2.29.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    // dependsOn startTestContainers
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== DEPLOYMENT TASKS ==========
task copyJarToK8s(type: Copy) {
    description = 'Copy JAR to Kubernetes deployment directory'
    group = 'Deployment'
    
    dependsOn bootJar
    
    doFirst {
        file(K8S_DIR).mkdirs()
        logger.lifecycle("üìÅ Target directory: $K8S_DIR")
        logger.lifecycle("üì¶ Source JAR: ${bootJar.archiveFile.get()}")
    }
    
    from bootJar.archiveFile.get()
    into K8S_DIR
    rename { "${SERVICE_NAME}.jar" }
    
    doLast {
        def targetFile = file("$K8S_DIR/${SERVICE_NAME}.jar")
        if (targetFile.exists()) {
            logger.lifecycle("‚úÖ JAR copied: ${targetFile.length()} bytes")
        } else {
            throw new GradleException("‚ùå JAR file was not copied!")
        }
    }
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}

// ========== TASK DEPENDENCIES ==========
bootJar {
    finalizedBy copyJarToK8s
}


task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
    if (it.name.contains('integration') || it.name.contains('e2e')) {
        // it.dependsOn startTestContainers
    }
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'
plugins {
    id 'base'
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö –ø–æ–¥–ø—Ä–æ–µ–∫—Ç–∞—Ö
task testAll {
    group = 'verification'
    description = 'Runs tests in all subprojects'
    
    // –ü—Ä–æ—Å—Ç–æ –∑–∞–≤–∏—Å–µ–º –æ—Ç –≤—Å–µ—Ö test –∑–∞–¥–∞—á
    dependsOn {
        subprojects.findAll { 
            it.tasks.findByName('test') != null 
        }.collect { 
            it.tasks.test 
        }
    }
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Allure –∏–∑ –≤—Å–µ—Ö –ø–æ–¥–ø—Ä–æ–µ–∫—Ç–æ–≤
task aggregateAllureResults(type: Copy) {
    group = 'reporting'
    description = 'Aggregates Allure results from all subprojects'

    into "${buildDir}/allure-results"
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ - –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

        subprojects.each { project ->
        def allureResultsDir = "${project.buildDir}/allure-results"
        if (file(allureResultsDir).exists()) {
            from(allureResultsDir) {
                include '**/*'
            }
        }
    }

    dependsOn testAll
    
    doFirst {
        delete "${buildDir}/allure-results"
        mkdir "${buildDir}/allure-results"
    }
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ Allure –æ—Ç—á—ë—Ç–∞
task generateAllureReport(type: Exec) {
    group = 'reporting'
    description = 'Generates combined Allure report from all subprojects'

    def resultsDir = file("${buildDir}/allure-results")
    def reportDir = file("${buildDir}/allure-report")

    commandLine 'allure', 'generate', resultsDir, '-o', reportDir, '--clean'

    dependsOn aggregateAllureResults

    doFirst {
        println "Generating combined Allure report from all subprojects"
    }

    doLast {
        println "Allure report generated at: file://${new File(reportDir.absolutePath + '/index.html')}"
    }
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ allure serve —Å —Å—ã—Ä—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
task allureServe(type: Exec) {
    group = 'reporting'
    description = 'Starts Allure server with combined results from all subprojects'

    def resultsDir = file("${buildDir}/allure-results")

    commandLine 'allure', 'serve', resultsDir

    dependsOn aggregateAllureResults

    doFirst {
        println "Starting Allure server with results from all subprojects"
        println "Report will be available at http://localhost:port"
    }
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ allure serve —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç—á—ë—Ç–æ–º
task allureServeGenerated(type: Exec) {
    group = 'reporting'
    description = 'Starts Allure server with generated combined report'

    def reportDir = file("${buildDir}/allure-report")

    commandLine 'allure', 'serve', reportDir

    dependsOn generateAllureReport

    doFirst {
        println "Starting Allure server with generated combined report"
    }
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ç—á—ë—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª)
task openAllureReport(type: Exec) {
    group = 'reporting'
    description = 'Opens the combined Allure report in browser'

    def reportDir = "${buildDir}/allure-report/index.html"

    commandLine 'open', reportDir

    dependsOn generateAllureReport

    onlyIf {
        System.getProperty('os.name').toLowerCase().contains('mac')
    }
}

// task copyAllJars {
//     group = 'build'
//     description = "Copy all service jars to deploy dir"
    
//     doFirst {
//         println "Copying all jars"
//     }
    
//     dependsOn subprojects.collect { it.tasks.findByName('copyJarTok8s') }.findAll { it != null }
    
//     doLast {
//         println "All jars copied!"
//     }
// }

// –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
tasks.named('build') {
    dependsOn testAll
}

tasks.named('check') {
    dependsOn testAll
}

tasks.named('clean'){
    dependsOn {
        subprojects.findAll { 
            it.tasks.findByName('clean') != null 
        }.collect { 
            it.tasks.clean 
        }
    }

}plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'io.qameta.allure' version '2.11.2'
}

group = 'com.service.device'
version = '0.0.1-SNAPSHOT'
description = 'Device managment service'

import java.nio.file.Paths
def service_name = 'device-service'
def k8sDir = Paths.get(System.getProperty('user.home'), "GitHub", "ConnectionProject", "kubernetes", "device-service").toString()


java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	mavenLocal()
}

dependencies {
	
	implementation 'org.springframework.boot:spring-boot-starter'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'org.springframework.data:spring-data-commons'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.3.0'
	implementation 'org.springframework.security:spring-security-config:6.5.3'
	implementation 'org.springframework.security:spring-security-web:6.5.3'
    implementation 'org.springframework.kafka:spring-kafka:3.3.10'


	implementation 'com.atomikos:transactions-spring-boot3-starter:6.0.0'
	
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

	
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	compileOnly 'org.projectlombok:lombok:1.18.38'
	annotationProcessor 'org.projectlombok:lombok:1.18.38'

	implementation 'com.connection:device-shared:1.0.0'
	compileOnly 'com.connection:device-shared:1.0.0'

    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:common-auth-events:1.0.0'
    implementation 'com.connection:common-device-events:1.0.0'

	// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:2.29.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}

compileJava {
    options.compilerArgs += ['-parameters']
}

compileTestJava {
    options.compilerArgs += ['-parameters']
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Allure
allure {
    version = '2.35.1'
    useJUnit5 {
        version = '2.29.1'
    }
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    systemProperty 'allure.results.directory', 'build/allure-results'
    
    // –î–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    systemProperty 'offline.mode', 'false'
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
task offlineTest(type: Test) {
    useJUnitPlatform()
    systemProperty 'offline.mode', 'true'
}

task copyJarToK8s(type: Copy) {
    dependsOn bootJar
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    doFirst {
        file(k8sDir).mkdirs()
        println "üìÅ –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $k8sDir"
        println "üì¶ –ò—Å—Ö–æ–¥–Ω—ã–π JAR: ${bootJar.archiveFile.get()}"
    }
    
    from bootJar.archiveFile.get()
    into k8sDir
    
    rename { String fileName ->
        "${service_name}.jar"
    }
    
    doLast {
        println "JAR —Ñ–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤: $k8sDir"
        println "–§–∞–π–ª: ${service_name}.jar"
        
        def targetFile = file("$k8sDir/${service_name}.jar")
        if (targetFile.exists()) {
            println "–†–∞–∑–º–µ—Ä —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${targetFile.length() / 1024 / 1024} MB"
        } else {
            println "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!"
        }
    }
}


bootJar.finalizedBy copyJarToK8splugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
}

// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'device-service'
    K8S_DIR = new File(System.getProperty('user.home') + "/GitHub/ConnectionProject/kubernetes/device-service").toString()
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}

group = 'com.service'
version = '0.0.1-SNAPSHOT'
description = 'Buffer Service'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}

// ========== ALLURE CONFIGURATION ==========
allure {
    version = "2.29.0"
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è JUnit 5
    adapter {
        allureJavaVersion = "2.29.0"
        aspectjWeaver = true
        frameworks {
            junit5 {
                enabled = true
                autoconfigure = true
                aspectjVersion = "1.9.22"
            }
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞
    report {
        reportDir = layout.buildDirectory.dir("reports/allure-report")
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

// ========== DEPENDENCIES ==========
dependencies {
	
	implementation 'org.springframework.boot:spring-boot-starter'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'org.springframework.data:spring-data-commons'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.3.0'
	implementation 'org.springframework.security:spring-security-config:6.5.3'
	implementation 'org.springframework.security:spring-security-web:6.5.3'
    implementation 'org.springframework.kafka:spring-kafka:3.3.10'


	implementation 'com.atomikos:transactions-spring-boot3-starter:6.0.0'
	
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

	
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	compileOnly 'org.projectlombok:lombok:1.18.38'
    testCompileOnly 'org.projectlombok:lombok:1.18.38'
	annotationProcessor 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

	implementation 'com.connection:device-shared:1.0.0'
	compileOnly 'com.connection:device-shared:1.0.0'

    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:common-auth-events:1.0.0'
    implementation 'com.connection:common-device-events:1.0.0'

	// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:2.29.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    // dependsOn startTestContainers
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== DEPLOYMENT TASKS ==========
task copyJarToK8s(type: Copy) {
    description = 'Copy JAR to Kubernetes deployment directory'
    group = 'Deployment'
    
    dependsOn bootJar
    
    doFirst {
        file(K8S_DIR).mkdirs()
        logger.lifecycle("üìÅ Target directory: $K8S_DIR")
        logger.lifecycle("üì¶ Source JAR: ${bootJar.archiveFile.get()}")
    }
    
    from bootJar.archiveFile.get()
    into K8S_DIR
    rename { "${SERVICE_NAME}.jar" }
    
    doLast {
        def targetFile = file("$K8S_DIR/${SERVICE_NAME}.jar")
        if (targetFile.exists()) {
            logger.lifecycle("‚úÖ JAR copied: ${targetFile.length()} bytes")
        } else {
            throw new GradleException("‚ùå JAR file was not copied!")
        }
    }
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}

// ========== TASK DEPENDENCIES ==========
bootJar {
    finalizedBy copyJarToK8s
}

task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn cleanTestContainers
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
    if (it.name.contains('integration') || it.name.contains('e2e')) {
        // it.dependsOn startTestContainers
    }
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'



plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
}

// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'device-service'
    K8S_DIR = new File(System.getProperty('user.home') + "/GitHub/ConnectionProject/kubernetes/device-service").toString()
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}

group = 'com.service'
version = '0.0.1-SNAPSHOT'
description = 'Buffer Service'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}

// ========== ALLURE CONFIGURATION ==========
allure {
    version = "2.29.0"
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è JUnit 5
    adapter {
        allureJavaVersion = "2.29.0"
        aspectjWeaver = true
        frameworks {
            junit5 {
                enabled = true
                autoconfigure = true
                aspectjVersion = "1.9.22"
            }
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞
    report {
        reportDir = layout.buildDirectory.dir("reports/allure-report")
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

// ========== DEPENDENCIES ==========
dependencies {
	
	implementation 'org.springframework.boot:spring-boot-starter'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'org.springframework.data:spring-data-commons'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka:3.3.10'
    implementation 'org.springframework.security:spring-security-config:6.5.3'
	implementation 'org.springframework.security:spring-security-web:6.5.3'


	implementation 'com.atomikos:transactions-spring-boot3-starter:6.0.0'
	
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'


	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

	
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	compileOnly 'org.projectlombok:lombok:1.18.38'
	annotationProcessor 'org.projectlombok:lombok:1.18.38'
	testCompileOnly 'org.projectlombok:lombok:1.18.38'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

	implementation 'com.connection:device-shared:1.0.0'
	implementation 'com.connection:device-token-shared:1.0.0'
    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:common-device-auth-events:1.0.0'
    implementation 'com.connection:common-auth-events:1.0.0'

	// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:2.29.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    // dependsOn startTestContainers
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== DEPLOYMENT TASKS ==========
task copyJarToK8s(type: Copy) {
    description = 'Copy JAR to Kubernetes deployment directory'
    group = 'Deployment'
    
    dependsOn bootJar
    
    doFirst {
        file(K8S_DIR).mkdirs()
        logger.lifecycle("üìÅ Target directory: $K8S_DIR")
        logger.lifecycle("üì¶ Source JAR: ${bootJar.archiveFile.get()}")
    }
    
    from bootJar.archiveFile.get()
    into K8S_DIR
    rename { "${SERVICE_NAME}.jar" }
    
    doLast {
        def targetFile = file("$K8S_DIR/${SERVICE_NAME}.jar")
        if (targetFile.exists()) {
            logger.lifecycle("‚úÖ JAR copied: ${targetFile.length()} bytes")
        } else {
            throw new GradleException("‚ùå JAR file was not copied!")
        }
    }
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}

// ========== TASK DEPENDENCIES ==========
bootJar {
    finalizedBy copyJarToK8s
}

task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn cleanTestContainers
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
    if (it.name.contains('integration') || it.name.contains('e2e')) {
        // it.dependsOn startTestContainers
    }
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'



plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
}

// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'device-service'
    K8S_DIR = new File(System.getProperty('user.home') + "/GitHub/ConnectionProject/kubernetes/device-service").toString()
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}

group = 'com.service'
version = '0.0.1-SNAPSHOT'
description = 'Buffer Service'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}

// ========== ALLURE CONFIGURATION ==========
allure {
    version = "2.29.0"
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è JUnit 5
    adapter {
        allureJavaVersion = "2.29.0"
        aspectjWeaver = true
        frameworks {
            junit5 {
                enabled = true
                autoconfigure = true
                aspectjVersion = "1.9.22"
            }
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞
    report {
        reportDir = layout.buildDirectory.dir("reports/allure-report")
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

// ========== DEPENDENCIES ==========
dependencies {
	
	implementation 'org.springframework.boot:spring-boot-starter'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'org.springframework.data:spring-data-commons'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka:3.3.10'
    implementation 'org.springframework.security:spring-security-config:6.5.3'
	implementation 'org.springframework.security:spring-security-web:6.5.3'


	implementation 'com.atomikos:transactions-spring-boot3-starter:6.0.0'
	
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'


	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

	
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	compileOnly 'org.projectlombok:lombok:1.18.38'
	annotationProcessor 'org.projectlombok:lombok:1.18.38'
	testCompileOnly 'org.projectlombok:lombok:1.18.38'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

	implementation 'com.connection:device-shared:1.0.0'
	implementation 'com.connection:device-token-shared:1.0.0'
    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:common-device-auth-events:1.0.0'
    implementation 'com.connection:common-auth-events:1.0.0'

	// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:2.29.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    // dependsOn startTestContainers
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== DEPLOYMENT TASKS ==========
task copyJarToK8s(type: Copy) {
    description = 'Copy JAR to Kubernetes deployment directory'
    group = 'Deployment'
    
    dependsOn bootJar
    
    doFirst {
        file(K8S_DIR).mkdirs()
        logger.lifecycle("üìÅ Target directory: $K8S_DIR")
        logger.lifecycle("üì¶ Source JAR: ${bootJar.archiveFile.get()}")
    }
    
    from bootJar.archiveFile.get()
    into K8S_DIR
    rename { "${SERVICE_NAME}.jar" }
    
    doLast {
        def targetFile = file("$K8S_DIR/${SERVICE_NAME}.jar")
        if (targetFile.exists()) {
            logger.lifecycle("‚úÖ JAR copied: ${targetFile.length()} bytes")
        } else {
            throw new GradleException("‚ùå JAR file was not copied!")
        }
    }
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}

// ========== TASK DEPENDENCIES ==========
bootJar {
    finalizedBy copyJarToK8s
}

task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn cleanTestContainers
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
    if (it.name.contains('integration') || it.name.contains('e2e')) {
        // it.dependsOn startTestContainers
    }
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'
plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '2.11.2'
    id 'maven-publish'

}

group = 'com.connection'
version = '1.0.0'
description = 'token shared module'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.3'
    compileOnly 'org.projectlombok:lombok:1.18.38'

   
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    testImplementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	testImplementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
	testImplementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Allure
allure {
    version = '2.35.1'
    useJUnit5 {
        version = '2.29.1'
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}

compileJava {
    options.compilerArgs += ['-parameters']
}

compileTestJava {
    options.compilerArgs += ['-parameters']
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    systemProperty 'allure.results.directory', 'build/allure-results'
    
    // –î–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    systemProperty 'offline.mode', 'false'
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
task offlineTest(type: Test) {
    useJUnitPlatform()
    systemProperty 'offline.mode', 'true'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'token Shared Module'
                description = 'Shared components for token management services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
    id 'maven-publish'
}


group = 'com.connection'
version = '1.0.0'
description = 'buffer-shared'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-shared'
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}
repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.3'
    compileOnly 'org.projectlombok:lombok:1.18.38'

   
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    testImplementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	testImplementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
	testImplementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'buffer Shared Module'
                description = 'Shared components for buffer services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java'
    id 'maven-publish'
}

group = 'com.connection'
version = '1.0.0'
sourceCompatibility = '21'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'com.connection:common-events:1.0.0'
    annotationProcessor 'com.connection:common-events:1.0.0'
    
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'common-auth-events'
        }
    }
    
    repositories {
        mavenLocal()
    }
}

test {
    useJUnitPlatform()
}plugins {
    id 'java'
    id 'maven-publish'
}

group = 'com.connection'
version = '1.0.0'
sourceCompatibility = '21'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'com.connection:common-events:1.0.0'
    annotationProcessor 'com.connection:common-events:1.0.0'
    
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'common-auth-events'
        }
    }
    
    repositories {
        mavenLocal()
    }
}

test {
    useJUnitPlatform()
}plugins {
    id 'java'
    id 'maven-publish'
}

group = 'com.connection'
version = '1.0.0'
sourceCompatibility = '21'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:device-shared:1.0.0'
    annotationProcessor 'com.connection:common-events:1.0.0'
    
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'common-device-events'
        }
    }
    
    repositories {
        mavenLocal()
    }
}

test {
    useJUnitPlatform()
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
    id 'maven-publish'
}


group = 'com.connection'
version = '1.0.0'
description = 'buffer-shared'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-shared'
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}
repositories {
    mavenCentral()
    mavenLocal()
}


dependencies {
    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:connection-scheme-shared:1.0.0'
    annotationProcessor 'com.connection:common-events:1.0.0'
    
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}
// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'buffer Shared Module'
                description = 'Shared components for buffer services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '2.11.2'
    id 'maven-publish'

}

group = 'com.connection'
version = '1.0.0'
description = 'Device shared module'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.3'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Allure
allure {
    version = '2.35.1'
    useJUnit5 {
        version = '2.29.1'
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}

compileJava {
    options.compilerArgs += ['-parameters']
}

compileTestJava {
    options.compilerArgs += ['-parameters']
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    systemProperty 'allure.results.directory', 'build/allure-results'
    
    // –î–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    systemProperty 'offline.mode', 'false'
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
task offlineTest(type: Test) {
    useJUnitPlatform()
    systemProperty 'offline.mode', 'true'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'Device Shared Module'
                description = 'Shared components for device management services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
    id 'maven-publish'
}


group = 'com.connection'
version = '1.0.0'
description = 'buffer-shared'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-shared'
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}
repositories {
    mavenCentral()
    mavenLocal()
}


dependencies {
    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.3'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'buffer Shared Module'
                description = 'Shared components for buffer services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '2.11.2'
    id 'maven-publish'

}

group = 'com.connection'
version = '1.0.0'
description = 'Common Kafka events shared module'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
    compileOnly 'org.projectlombok:lombok:1.18.38'    
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Allure
allure {
    version = '2.35.1'
    useJUnit5 {
        version = '2.29.1'
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}

compileJava {
    options.compilerArgs += ['-parameters']
}

compileTestJava {
    options.compilerArgs += ['-parameters']
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    systemProperty 'allure.results.directory', 'build/allure-results'
    
    // –î–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    systemProperty 'offline.mode', 'false'
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
task offlineTest(type: Test) {
    useJUnitPlatform()
    systemProperty 'offline.mode', 'true'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'Kafka Shared Module'
                description = 'Shared components for token management services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
    id 'maven-publish'
}


group = 'com.connection'
version = '1.0.0'
description = 'buffer-shared'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-shared'
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}
repositories {
    mavenCentral()
    mavenLocal()
}


dependencies {
    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
    compileOnly 'org.projectlombok:lombok:1.18.38'    
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'buffer Shared Module'
                description = 'Shared components for buffer services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java'
    id 'maven-publish'
}

group = 'com.connection'
version = '1.0.0'
sourceCompatibility = '21'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'com.connection:common-events:1.0.0'
    annotationProcessor 'com.connection:common-events:1.0.0'
    
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'common-auth-events'
        }
    }
    
    repositories {
        mavenLocal()
    }
}

test {
    useJUnitPlatform()
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
    id 'maven-publish'
}


group = 'com.connection'
version = '1.0.0'
description = 'buffer-shared'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-shared'
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}
repositories {
    mavenCentral()
    mavenLocal()
}


dependencies {
    implementation 'com.connection:common-events:1.0.0'
    annotationProcessor 'com.connection:common-events:1.0.0'
    
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}
// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'buffer Shared Module'
                description = 'Shared components for buffer services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
    id 'maven-publish'
}


group = 'com.connection'
version = '1.0.0'
description = 'buffer-shared'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-shared'
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}
repositories {
    mavenCentral()
    mavenLocal()
}


dependencies {
    // Implementation –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.3'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}
// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'buffer Shared Module'
                description = 'Shared components for buffer services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '2.11.2'
    id 'maven-publish'

}

group = 'com.connection'
version = '1.0.0'
description = 'client shared module'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.3'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Allure
allure {
    version = '2.35.1'
    useJUnit5 {
        version = '2.29.1'
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}

compileJava {
    options.compilerArgs += ['-parameters']
}

compileTestJava {
    options.compilerArgs += ['-parameters']
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    systemProperty 'allure.results.directory', 'build/allure-results'
    
    // –î–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    systemProperty 'offline.mode', 'false'
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
task offlineTest(type: Test) {
    useJUnitPlatform()
    systemProperty 'offline.mode', 'true'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'client Shared Module'
                description = 'Shared components for client management services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
    id 'maven-publish'
}


group = 'com.connection'
version = '1.0.0'
description = 'buffer-shared'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-shared'
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}
repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.3'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'buffer Shared Module'
                description = 'Shared components for buffer services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
    id 'maven-publish'
}


group = 'com.connection'
version = '1.0.0'
description = 'buffer-shared'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-shared'
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}
repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    // Implementation –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.3'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'buffer Shared Module'
                description = 'Shared components for buffer services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java'
    id 'maven-publish'
}

group = 'com.connection'
version = '1.0.0'
sourceCompatibility = '21'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'com.connection:common-events:1.0.0'
    annotationProcessor 'com.connection:common-events:1.0.0'
    
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'common-auth-events'
        }
    }
    
    repositories {
        mavenLocal()
    }
}

test {
    useJUnitPlatform()
}plugins {
    id 'java'
    id 'maven-publish'
}

group = 'com.connection'
version = '1.0.0'
sourceCompatibility = '21'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'com.connection:common-events:1.0.0'
    annotationProcessor 'com.connection:common-events:1.0.0'
    
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'common-auth-events'
        }
    }
    
    repositories {
        mavenLocal()
    }
}

test {
    useJUnitPlatform()
}plugins {
    id 'java'
    id 'maven-publish'
}

group = 'com.connection'
version = '1.0.0'
sourceCompatibility = '21'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:device-shared:1.0.0'
    annotationProcessor 'com.connection:common-events:1.0.0'
    
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'common-device-events'
        }
    }
    
    repositories {
        mavenLocal()
    }
}

test {
    useJUnitPlatform()
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
    id 'maven-publish'
}


group = 'com.connection'
version = '1.0.0'
description = 'buffer-shared'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-shared'
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}
repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:device-shared:1.0.0'
    annotationProcessor 'com.connection:common-events:1.0.0'
    
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}

// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'buffer Shared Module'
                description = 'Shared components for buffer services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '2.11.2'
    id 'maven-publish'

}

group = 'com.connection'
version = '1.0.0'
description = 'device token shared module'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.3'
    compileOnly 'org.projectlombok:lombok:1.18.38'

   
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    testImplementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	testImplementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
	testImplementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Allure
allure {
    version = '2.35.1'
    useJUnit5 {
        version = '2.29.1'
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}

compileJava {
    options.compilerArgs += ['-parameters']
}

compileTestJava {
    options.compilerArgs += ['-parameters']
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    systemProperty 'allure.results.directory', 'build/allure-results'
    
    // –î–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    systemProperty 'offline.mode', 'false'
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
task offlineTest(type: Test) {
    useJUnitPlatform()
    systemProperty 'offline.mode', 'true'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'Device token Shared Module'
                description = 'Shared components for token management services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
    id 'maven-publish'
}


group = 'com.connection'
version = '1.0.0'
description = 'buffer-shared'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-shared'
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}
repositories {
    mavenCentral()
    mavenLocal()
}


dependencies {
    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.3'
    compileOnly 'org.projectlombok:lombok:1.18.38'

   
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    testImplementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	testImplementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
	testImplementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'buffer Shared Module'
                description = 'Shared components for buffer services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'base'
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö –ø–æ–¥–ø—Ä–æ–µ–∫—Ç–∞—Ö
task testAll {
    group = 'verification'
    description = 'Runs tests in all subprojects'
    
    // –ü—Ä–æ—Å—Ç–æ –∑–∞–≤–∏—Å–µ–º –æ—Ç –≤—Å–µ—Ö test –∑–∞–¥–∞—á
    dependsOn {
        subprojects.findAll { 
            it.tasks.findByName('test') != null 
        }.collect { 
            it.tasks.test 
        }
    }
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Allure –∏–∑ –≤—Å–µ—Ö –ø–æ–¥–ø—Ä–æ–µ–∫—Ç–æ–≤
task aggregateAllureResults(type: Copy) {
    group = 'reporting'
    description = 'Aggregates Allure results from all subprojects'

    into "${buildDir}/allure-results"
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ - –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

        subprojects.each { project ->
        def allureResultsDir = "${project.buildDir}/allure-results"
        if (file(allureResultsDir).exists()) {
            from(allureResultsDir) {
                include '**/*'
                // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ - –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                // Allure —Å–∞–º —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
            }
        }
    }

    dependsOn testAll
    
    doFirst {
        delete "${buildDir}/allure-results"
        mkdir "${buildDir}/allure-results"
    }
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ Allure –æ—Ç—á—ë—Ç–∞
task generateAllureReport(type: Exec) {
    group = 'reporting'
    description = 'Generates combined Allure report from all subprojects'

    def resultsDir = file("${buildDir}/allure-results")
    def reportDir = file("${buildDir}/allure-report")

    commandLine 'allure', 'generate', resultsDir, '-o', reportDir, '--clean'

    dependsOn aggregateAllureResults

    doFirst {
        println "Generating combined Allure report from all subprojects"
    }

    doLast {
        println "Allure report generated at: file://${new File(reportDir.absolutePath + '/index.html')}"
    }
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ allure serve —Å —Å—ã—Ä—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
task allureServe(type: Exec) {
    group = 'reporting'
    description = 'Starts Allure server with combined results from all subprojects'

    def resultsDir = file("${buildDir}/allure-results")

    commandLine 'allure', 'serve', resultsDir

    dependsOn aggregateAllureResults

    doFirst {
        println "Starting Allure server with results from all subprojects"
        println "Report will be available at http://localhost:port"
    }
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ allure serve —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç—á—ë—Ç–æ–º
task allureServeGenerated(type: Exec) {
    group = 'reporting'
    description = 'Starts Allure server with generated combined report'

    def reportDir = file("${buildDir}/allure-report")

    commandLine 'allure', 'serve', reportDir

    dependsOn generateAllureReport

    doFirst {
        println "Starting Allure server with generated combined report"
    }
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ç—á—ë—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª)
task openAllureReport(type: Exec) {
    group = 'reporting'
    description = 'Opens the combined Allure report in browser'

    def reportDir = "${buildDir}/allure-report/index.html"

    commandLine 'open', reportDir

    dependsOn generateAllureReport

    onlyIf {
        System.getProperty('os.name').toLowerCase().contains('mac')
    }
}

// –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
tasks.named('build') {
    dependsOn testAll
}

tasks.named('check') {
    dependsOn testAll
}plugins {
    id 'java'
    id 'maven-publish'
}

group = 'com.connection'
version = '1.0.0'
sourceCompatibility = '21'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:message-shared:1.0.0'
    
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'common-message-events'
        }
    }
    
    repositories {
        mavenLocal()
    }
}

test {
    useJUnitPlatform()
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
    id 'maven-publish'
}


group = 'com.connection'
version = '1.0.0'
description = 'buffer-shared'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-shared'
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}
repositories {
    mavenCentral()
    mavenLocal()
}


dependencies {
    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:message-shared:1.0.0'
    
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}

// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'buffer Shared Module'
                description = 'Shared components for buffer services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java'
    id 'maven-publish'
}

group = 'com.connection'
version = '1.0.0'
sourceCompatibility = '21'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:buffer-shared:1.0.0'
    annotationProcessor 'com.connection:common-events:1.0.0'
    
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'common-buffer-events'
        }
    }
    
    repositories {
        mavenLocal()
    }
}

test {
    useJUnitPlatform()
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
    id 'maven-publish'
}


group = 'com.connection'
version = '1.0.0'
description = 'buffer-shared'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-shared'
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}
repositories {
    mavenCentral()
    mavenLocal()
}


dependencies {
    implementation 'com.connection:common-events:1.0.0'
    implementation 'com.connection:buffer-shared:1.0.0'
    annotationProcessor 'com.connection:common-events:1.0.0'
    
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}

// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'buffer Shared Module'
                description = 'Shared components for buffer services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '2.11.2'
    id 'maven-publish'

}

group = 'com.connection'
version = '1.0.0'
description = 'connection-scheme shared module'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.3'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.18.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Allure
allure {
    version = '2.35.1'
    useJUnit5 {
        version = '2.29.1'
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}

compileJava {
    options.compilerArgs += ['-parameters']
}

compileTestJava {
    options.compilerArgs += ['-parameters']
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    systemProperty 'allure.results.directory', 'build/allure-results'
    
    // –î–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    systemProperty 'offline.mode', 'false'
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
task offlineTest(type: Test) {
    useJUnitPlatform()
    systemProperty 'offline.mode', 'true'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'connection-scheme Shared Module'
                description = 'Shared components for connection-scheme management services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}
plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
    id 'maven-publish'
}


group = 'com.connection'
version = '1.0.0'
description = 'buffer-shared'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-shared'
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}
repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.3'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.18.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'buffer Shared Module'
                description = 'Shared components for buffer services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java'
    id 'maven-publish'
}

group = 'com.connection'
version = '1.0.0'
sourceCompatibility = '21'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'com.connection:common-events:1.0.0'
    annotationProcessor 'com.connection:common-events:1.0.0'
    
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'common-device-auth-events'
        }
    }
    
    repositories {
        mavenLocal()
    }
}

test {
    useJUnitPlatform()
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
    id 'maven-publish'
}


group = 'com.connection'
version = '1.0.0'
description = 'buffer-shared'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


// ========== CONFIGURATION ==========
ext {
    SERVICE_NAME = 'buffer-shared'
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR =  "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly {
        extendsFrom testRuntimeOnly
    }
}
repositories {
    mavenCentral()
    mavenLocal()
}


dependencies {
    implementation 'com.connection:common-events:1.0.0'
    annotationProcessor 'com.connection:common-events:1.0.0'
    
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}

// ========== COMPILATION CONFIGURATION ==========
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// ========== DOCKER COMPOSE CONFIGURATION ==========
dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yaml']
    projectName = "${SERVICE_NAME}-test"
    stopContainers = true
    removeContainers = true
    removeImages = com.avast.gradle.dockercompose.RemoveImages.Local
    removeVolumes = true
    environment.put 'COMPOSE_PROJECT_NAME', "${SERVICE_NAME}-test"
}

// ========== ALLURE TASKS ==========
task generateAllureReport(type: Exec) {
    description = 'Generate Allure report from results with history'
    group = 'Reporting'
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ
    doFirst {
        logger.lifecycle("üìä Generating Allure report with history...")
        logger.lifecycle("   Results: ${ALLURE_RESULTS_DIR}")
        logger.lifecycle("   Report: ${ALLURE_REPORT_DIR}")
        logger.lifecycle("   History: ${ALLURE_HISTORY_DIR}")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        file(ALLURE_HISTORY_DIR).mkdirs()
        file("${ALLURE_HISTORY_DIR}/history").mkdirs()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        def historySource = file("${ALLURE_HISTORY_DIR}/history")
        def historyTarget = file("${ALLURE_RESULTS_DIR}/history")
        
        if (historySource.exists()) {
            logger.lifecycle("   Copying history from previous report...")
            copy {
                from historySource
                into historyTarget
            }
        }
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Allure report generated at: ${ALLURE_REPORT_DIR}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def historySource = file("${ALLURE_REPORT_DIR}/history")
            def historyTarget = file("${ALLURE_HISTORY_DIR}/history")
            
            if (historySource.exists()) {
                logger.lifecycle("   Copying history from previous report...")
                copy {
                    from historySource
                    into historyTarget
                }
            }
            
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
        } else {
            logger.lifecycle("‚ö†Ô∏è  Allure report generation completed but index.html not found")
        }
    }
}

task openAllureReport(type: Exec) {
    description = 'Open Allure report in default browser'
    group = 'Reporting'
    
    commandLine 'open', "${ALLURE_REPORT_DIR}/index.html"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üåê Opening Allure report in browser...")
    }
}

task serveAllureReport(type: Exec) {
    description = 'Serve Allure report with built-in server and history'
    group = 'Reporting'

    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
    
    dependsOn generateAllureReport
    
    doFirst {
        logger.lifecycle("üöÄ Starting Allure server with history...")
    }
}

task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'Reporting'
    delete ALLURE_RESULTS_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure results: ${ALLURE_RESULTS_DIR}")
    }
}

task cleanAllureReport(type: Delete) {
    description = 'Clean Allure report directory'
    group = 'Reporting'
    delete ALLURE_REPORT_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure report: ${ALLURE_REPORT_DIR}")
    }
}

task cleanAllureHistory(type: Delete) {
    description = 'Clean Allure history directory'
    group = 'Reporting'
    delete ALLURE_HISTORY_DIR
    
    doLast {
        logger.lifecycle("üßπ Cleaned Allure history: ${ALLURE_HISTORY_DIR}")
    }
}

task showAllureResults {
    description = 'Show Allure results structure'
    group = 'Reporting'
    
    doLast {
        def resultsDir = file(ALLURE_RESULTS_DIR)
        logger.lifecycle("üìÅ Allure Results Directory: ${resultsDir.absolutePath}")
        
        if (resultsDir.exists()) {
            def files = resultsDir.listFiles()
            if (files) {
                logger.lifecycle("üìä Found ${files.size()} result files:")
                files.each { file ->
                    logger.lifecycle("   üìÑ ${file.name} (${file.length()} bytes)")
                }
            } else {
                logger.lifecycle("‚ùå No result files found in Allure results directory")
            }
        } else {
            logger.lifecycle("‚ùå Allure results directory does not exist")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        def historyDir = file(ALLURE_HISTORY_DIR)
        if (historyDir.exists()) {
            def historyFiles = historyDir.listFiles()
            if (historyFiles) {
                logger.lifecycle("üìà Allure History: ${historyFiles.size()} history entries")
            } else {
                logger.lifecycle("üìà No history found")
            }
        }
    }
}

task updateAllureHistory {
    description = 'Update Allure history from current report'
    group = 'Reporting'
    
    doLast {
        def historySource = file("${ALLURE_REPORT_DIR}/history")
        def historyTarget = file(ALLURE_HISTORY_DIR)
        
        if (historySource.exists()) {
            copy {
                from historySource
                into historyTarget
            }
            logger.lifecycle("‚úÖ Allure history updated from current report")
        } else {
            logger.lifecycle("‚ö†Ô∏è  No history found in current report")
        }
    }
}

// ========== DOCKER MANAGEMENT TASKS ==========
task startTestContainers {
    description = 'Start test containers for integration tests'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üöÄ Starting test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'up', '-d'
        }
        logger.lifecycle("‚úÖ Test containers started")
        logger.lifecycle("   PostgreSQL: localhost:5434")
        logger.lifecycle("   Kafka: localhost:29093")
        
        // Wait for containers to be ready
        sleep(10_000)
        logger.lifecycle("‚è≥ Containers are ready")
    }
}

task stopTestContainers {
    description = 'Stop test containers'
    group = 'Docker'
    
    doFirst {
        logger.lifecycle("üõë Stopping test containers...")
    }
    
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down'
        }
        logger.lifecycle("‚úÖ Test containers stopped")
    }
}

task cleanTestContainers {
    description = 'Stop and remove test containers with volumes'
    group = 'Docker'
    
    doLast {
        logger.lifecycle("üßπ Cleaning test containers...")
        exec {
            commandLine 'docker-compose', '-f', 'src/test/resources/docker-compose.yaml', 
                       '-p', "${SERVICE_NAME}-test", 'down', '-v', '--rmi', 'local'
        }
        logger.lifecycle("‚úÖ Test containers and volumes cleaned")
    }
}

// ========== TEST CONFIGURATION ==========
// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
def configureTestTask = { Test task, String taskName ->
    task.useJUnitPlatform()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Allure
    task.systemProperty 'allure.results.directory', "${ALLURE_RESULTS_DIR}"
    task.systemProperty 'allure.junit5.listeners', 'io.qameta.allure.junit5.AllureJunit5'
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task.systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    task.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    task.systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    task.systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'
    

    task.reports.html.required = false
    task.reports.junitXml.required = false

    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    task.reports {
        html.outputLocation = null
        junitXml.outputLocation = null
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    task.outputs.upToDateWhen { false }
}

// Unit tests
test {
    description = 'Run unit tests'
    group = 'Verification'
    
    configureTestTask(delegate, 'test')
    exclude '**/*IntegrationTest.*', '**/*E2ETest.*'
    
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'offline.mode', 'false'
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dependsOn cleanAllureResults
    finalizedBy generateAllureReport
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Run integration tests with Testcontainers'
    group = 'Verification'
    
    configureTestTask(delegate, 'integrationTest')
    include '**/*IntegrationTest.*'
    
    systemProperty 'spring.profiles.active', 'integrationtest'
    
    doFirst {
        logger.lifecycle("üîß Running integration tests")
        logger.lifecycle("   Database: localhost:5434/test_db")
        logger.lifecycle("   Kafka: localhost:29093")
    }
    
    finalizedBy generateAllureReport
}

// All tests sequence
task allTests {
    description = 'Run all tests in sequence: unit ‚Üí integration ‚Üí e2e'
    group = 'Verification'
    dependsOn test, integrationTest
    tasks.findByName('integrationTest')?.mustRunAfter('test')
    finalizedBy generateAllureReport
}

// Offline tests
task offlineTest(type: Test) {
    description = 'Run tests in offline mode'
    group = 'Verification'
    
    configureTestTask(delegate, 'offlineTest')
    systemProperty 'offline.mode', 'true'
    finalizedBy generateAllureReport
}

// ========== CLEANUP TASKS ==========
task cleanTestResults(type: Delete) {
    description = 'Clean old test results'
    group = 'Build'
    delete layout.buildDirectory.dir("test-results")
    delete layout.buildDirectory.dir("reports/tests")
}



task deepClean {
    description = 'Complete clean including Allure history'
    group = 'Build'
    dependsOn clean, cleanAllureResults, cleanAllureReport, cleanAllureHistory
}

// ========== TASK RELATIONS ==========
tasks.named('integrationTest') { 
    mustRunAfter test 
}


// Prevent running integration tests without containers
tasks.withType(Test).configureEach { 
}


// ========== DEFAULT TASKS ==========
defaultTasks 'build'


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'buffer Shared Module'
                description = 'Shared components for buffer services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '3.0.0'
    id 'maven-publish'
    id 'com.dorongold.task-tree' version '2.1.1'
}

// ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–û–ï–ö–¢–ê ==========
allprojects {
    group = 'com.connection'
    version = '1.0.0'
    
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'maven-publish'
    
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }
    
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }
    
    repositories {
        mavenCentral()
        mavenLocal()
    }
    
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:3.5.5"
        }
    }
}

// ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø –ü–û–î–ü–†–û–ï–ö–¢–û–í ==========
subprojects {
    // –û–±—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.38'
        annotationProcessor 'org.projectlombok:lombok:1.18.38'
        
        testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
        testImplementation 'org.mockito:mockito-core:5.18.0'
        testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
        testImplementation 'org.assertj:assertj-core:3.27.3'
        testImplementation 'io.qameta.allure:allure-junit5:2.29.1'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }
    
    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs += ['-parameters']
        options.encoding = 'UTF-8'
    }
    
    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
    }
}

// ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ALLURE –î–õ–Ø –í–°–ï–ì–û –ü–†–û–ï–ö–¢–ê ==========
ext {
    ALLURE_RESULTS_DIR = "${buildDir}/allure-results"
    ALLURE_REPORT_DIR = "${buildDir}/reports/allure-report"
    ALLURE_HISTORY_DIR = "${projectDir}/allure-history"  // –¢–µ–ø–µ—Ä—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–∂–¥—É —Å–±–æ—Ä–∫–∞–º–∏
}

allure {
    version = "2.29.0"
    adapter {
        frameworks {
            junit5 {
                enabled = true
            }
        }
    }
}

// ========== –ó–ê–î–ê–ß–ò –î–õ–Ø –í–°–ï–ì–û –ü–†–û–ï–ö–¢–ê ==========

// –°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
task buildAll {
    description = 'Build all modules'
    group = 'Build'
    dependsOn subprojects.build
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
task testAll {
    description = 'Run tests in all modules'
    group = 'Verification'
}

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
gradle.projectsEvaluated {
    subprojects { project ->
        def allTestsTask = project.tasks.findByName('allTests')
        if (allTestsTask) {
            testAll.dependsOn allTestsTask
            logger.lifecycle("‚úÖ Adding allTests dependency from: ${project.name}")
        } else {
            logger.lifecycle("‚ùå No allTests task found in: ${project.name}")
        }
    }
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
task cleanAll {
    description = 'Clean all modules'
    group = 'Build'
    dependsOn subprojects.clean
}

// –°–±–æ—Ä–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ Allure –∏–∑ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
task collectAllureResults {
    description = 'Collect Allure results from all modules'
    group = 'Reporting'
    
    doFirst {
        file(ALLURE_RESULTS_DIR).deleteDir()
        file(ALLURE_RESULTS_DIR).mkdirs()
        
        // –°–Ω–∞—á–∞–ª–∞ –∫–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞
        def previousHistoryDir = file("${ALLURE_HISTORY_DIR}")
        def resultsHistoryDir = file("${ALLURE_RESULTS_DIR}/history")
        
        if (previousHistoryDir.exists()) {
            logger.lifecycle("üìã Copying history from previous reports")
            copy {
                from previousHistoryDir
                into resultsHistoryDir
            }
        }
        
        // –ó–∞—Ç–µ–º –∫–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –≤—Å–µ—Ö –ø–æ–¥–ø—Ä–æ–µ–∫—Ç–æ–≤
        subprojects.each { subproject ->
            def subprojectResults = "${subproject.buildDir}/allure-results"
            def subprojectDir = file(subprojectResults)
            
            if (subprojectDir.exists()) {
                logger.lifecycle("üìÅ Copying results from: ${subproject.name}")
                copy {
                    from subprojectDir
                    into ALLURE_RESULTS_DIR
                    // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    exclude '*.tmp', '*.lock'
                    // –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å
                    duplicatesStrategy = 'exclude'
                }
            } else {
                logger.lifecycle("‚ö†Ô∏è No allure results found in: ${subproject.name}")
            }
        }
        
        logger.lifecycle("üìä Collected results from ${subprojects.count { file("${it.buildDir}/allure-results").exists() }} modules")
    }
}

task generateCombinedAllureReport(type: Exec) {
    description = 'Generate combined Allure report from all modules'
    group = 'Reporting'
    
    dependsOn collectAllureResults
    
    doFirst {
        logger.lifecycle("üìä Generating combined Allure report...")
        file(ALLURE_REPORT_DIR).mkdirs()
    }
    
    commandLine 'allure', 'generate', "${ALLURE_RESULTS_DIR}", '-o', "${ALLURE_REPORT_DIR}", '--clean'
    
    doLast {
        def reportFile = file("${ALLURE_REPORT_DIR}/index.html")
        if (reportFile.exists()) {
            logger.lifecycle("‚úÖ Combined Allure report generated at: ${ALLURE_REPORT_DIR}")
            logger.lifecycle("   Open: file://${reportFile.absolutePath}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def reportHistoryDir = file("${ALLURE_REPORT_DIR}/history")
            if (reportHistoryDir.exists()) {
                copy {
                    from reportHistoryDir
                    into ALLURE_HISTORY_DIR
                }
                logger.lifecycle("üíæ History saved for next run")
            }
        }
    }
}

task serveCombinedAllureReport(type: Exec) {
    description = 'Serve combined Allure report'
    group = 'Reporting'
    
    dependsOn generateCombinedAllureReport
    
    commandLine 'allure', 'serve', "${ALLURE_RESULTS_DIR}"
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞ –±–µ–∑ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
task serveExistingAllureReport(type: Exec) {
    description = 'Serve existing Allure report'
    group = 'Reporting'
    
    commandLine 'allure', 'serve', "${ALLURE_REPORT_DIR}"
}

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ Allure
task cleanAllureHistory {
    description = 'Clean Allure history'
    group = 'Build'
    doFirst {
        file(ALLURE_HISTORY_DIR).deleteDir()
        logger.lifecycle("üßπ Cleaned Allure history")
    }
}

// –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–∫–ª—é—á–∞—è –∏—Å—Ç–æ—Ä–∏—é
task cleanAllWithHistory {
    description = 'Clean all modules and Allure history'
    group = 'Build'
    dependsOn cleanAll, cleanAllureHistory
}

// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö shared –º–æ–¥—É–ª–µ–π
task publishAllShared {
    description = 'Publish all shared modules to local Maven'
    group = 'Publishing'
    dependsOn subprojects.findAll { it.path.contains('shared') && it.tasks.findByName('publish') }.publish
}

// ========== –ó–ê–î–ê–ß–ò –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ ==========
defaultTasks 'buildAll'plugins {
    id 'java-library'                 
    id 'io.spring.dependency-management' version '1.1.7'
    id 'maven-publish'
}

group = 'com.connection'
version = '1.0.0'
description = 'tariff-shared'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// –í–∞–∂–Ω–æ: dependencyManagement –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏
dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:3.5.5"
    }
}

dependencies {
    // Implementation –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.3'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.5.3'
}

tasks.named('test') {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'tariff Shared Module'
                description = 'Shared components for tariff services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
    id 'java-library'                 
    id 'io.spring.dependency-management' version '1.1.7'
    id 'maven-publish'
}

group = 'com.connection'
version = '1.0.0'
description = 'transaction-shared'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// –í–∞–∂–Ω–æ: dependencyManagement –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏
dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:3.5.5"
    }
}

dependencies {
    // Implementation –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.3'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.5.3'
}

tasks.named('test') {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pom –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            pom {
                name = 'Transaction Shared Module'
                description = 'Shared components for transaction services'
                url = 'http://www.example.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'io.qameta.allure' version '2.11.2'
}

group = 'com.service.bufferdevice'
version = '0.0.1-SNAPSHOT'
description = 'bufferdevice managment service'

import java.nio.file.Paths
def service_name = 'bufferdevice-service'
def k8sDir = Paths.get(System.getProperty('user.home'), "GitHub", "ConnectionProject", "kubernetes", "bufferdevice-service").toString()


java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	mavenLocal()
}

dependencies {
	
	implementation 'org.springframework.boot:spring-boot-starter'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'org.springframework.data:spring-data-commons'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.3.0'
	implementation 'org.springframework.security:spring-security-config:6.5.3'
	implementation 'org.springframework.security:spring-security-web:6.5.3'


	implementation 'com.atomikos:transactions-spring-boot3-starter:6.0.0'
	
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

	
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	compileOnly 'org.projectlombok:lombok:1.18.38'
	annotationProcessor 'org.projectlombok:lombok:1.18.38'

	implementation 'com.connection:token-shared:1.0.0'
	compileOnly 'com.connection:token-shared:1.0.0'

	implementation 'com.connection:connection-scheme-shared:1.0.0'
	compileOnly 'com.connection:connection-scheme-shared:1.0.0'
	
	implementation 'com.connection:buffer-shared:1.0.0'
	compileOnly 'com.connection:buffer-shared:1.0.0'

	implementation 'com.connection:device-shared:1.0.0'
	compileOnly 'com.connection:device-shared:1.0.0'
	// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-junit5:2.29.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}

compileJava {
    options.compilerArgs += ['-parameters']
}

compileTestJava {
    options.compilerArgs += ['-parameters']
}

tasks.named('test') {
	useJUnitPlatform()
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Allure
allure {
    version = '2.35.1'
    useJUnit5 {
        version = '2.29.1'
    }
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.execution.order.random.seed', '42'
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    systemProperty 'allure.results.directory', 'build/allure-results'
    
    // –î–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    systemProperty 'offline.mode', 'false'
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
task offlineTest(type: Test) {
    useJUnitPlatform()
    systemProperty 'offline.mode', 'true'
}



task copyJarToK8s(type: Copy) {
    dependsOn bootJar
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    doFirst {
        file(k8sDir).mkdirs()
        println "üìÅ –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $k8sDir"
        println "üì¶ –ò—Å—Ö–æ–¥–Ω—ã–π JAR: ${bootJar.archiveFile.get()}"
    }
    
    from bootJar.archiveFile.get()
    into k8sDir
    
    rename { String fileName ->
        "${service_name}.jar"
    }
    
    doLast {
        println "JAR —Ñ–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤: $k8sDir"
        println "–§–∞–π–ª: ${service_name}.jar"
        
        def targetFile = file("$k8sDir/${service_name}.jar")
        if (targetFile.exists()) {
            println "–†–∞–∑–º–µ—Ä —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${targetFile.length() / 1024 / 1024} MB"
        } else {
            println "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!"
        }
    }
}


bootJar.finalizedBy copyJarToK8s